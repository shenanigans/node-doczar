{"elemID":"component_592","date":"6/5/2020","time":"12:00am","name":"queue","pathname":"queue","pathstr":"async.queue","path":[["/","async"],[".","queue"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_587","date":"6/5/2020","time":"12:00am","name":"worker","pathname":"worker","pathstr":"async.queue(worker","path":[["/","async"],[".","queue"],["(","worker"]],"flags":[],"source":[["/","async"],[".","queue"]],"sourcestr":"async.queue","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_585","date":"6/5/2020","time":"12:00am","pathname":"unnamed_123","pathstr":"async.queue(worker(unnamed_123","path":[["/","async"],[".","queue"],["(","worker"],["(","unnamed_123"]],"flags":[],"source":[["/","async"],[".","queue"],["(","worker"]],"sourcestr":"async.queue(worker","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","queue"]],"name":"queue","delimiter":"."},{"path":[["/","async"],[".","queue"],["(","worker"]],"name":"worker","delimiter":"("},{"path":[["/","async"],[".","queue"],["(","worker"],["(","unnamed_123"]],"name":"unnamed_123","delimiter":"("}],"sanitaryName":"unnamed_123"},{"elemID":"component_586","date":"6/5/2020","time":"12:00am","pathname":"unnamed_124","pathstr":"async.queue(worker(unnamed_124","path":[["/","async"],[".","queue"],["(","worker"],["(","unnamed_124"]],"flags":[],"source":[["/","async"],[".","queue"],["(","worker"]],"sourcestr":"async.queue(worker","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isFunction":false,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","queue"]],"name":"queue","delimiter":"."},{"path":[["/","async"],[".","queue"],["(","worker"]],"name":"worker","delimiter":"("},{"path":[["/","async"],[".","queue"],["(","worker"],["(","unnamed_124"]],"name":"unnamed_124","delimiter":"("}],"sanitaryName":"unnamed_124"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","queue"]],"name":"queue","delimiter":"."},{"path":[["/","async"],[".","queue"],["(","worker"]],"name":"worker","delimiter":"("}],"sanitaryName":"worker"},{"elemID":"component_588","date":"6/5/2020","time":"12:00am","name":"concurrency","pathname":"concurrency","pathstr":"async.queue(concurrency","path":[["/","async"],[".","queue"],["(","concurrency"]],"flags":[],"source":[["/","async"],[".","queue"]],"sourcestr":"async.queue","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","queue"]],"name":"queue","delimiter":"."},{"path":[["/","async"],[".","queue"],["(","concurrency"]],"name":"concurrency","delimiter":"("}],"sanitaryName":"concurrency"}],"finalArgs":[],"finalKwargs":[],"returns":[{"elemID":"component_589","date":"6/5/2020","time":"12:00am","pathname":"unnamed_125","pathstr":"async.queue)unnamed_125","path":[["/","async"],[".","queue"],[")","unnamed_125"]],"flags":[],"source":[["/","async"],[".","queue"]],"sourcestr":"async.queue","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"returns","valtype":[{"path":[[null,"Object"]],"isPointer":false,"isArray":false,"generics":[],"name":"Object"}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"returns","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isInline":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","queue"]],"name":"queue","delimiter":"."},{"path":[["/","async"],[".","queue"],[")","unnamed_125"]],"name":"unnamed_125","delimiter":")"}],"sanitaryName":"unnamed_125"}],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"sourceFile":"async.js","sourceLine":3877,"summaryDoc":[{"doc":"\n\nCreates a `queue` object with the specified `concurrency`. Tasks added to the\n`queue` are processed in parallel (up to the `concurrency` limit). If all\n`worker`s are in progress, the task is queued until one becomes available.\nOnce a `worker` completes a `task`, that `task`'s callback is called.\n\ntask, which must call its `callback(err)` argument when finished, with an\noptional `error` as an argument.  If you want to handle errors from an\nindividual task, pass a callback to `q.push()`. Invoked with\n(task, callback).\n`worker` functions should be run in parallel.  If omitted, the concurrency\ndefaults to `1`.  If the concurrency is `0`, an error is thrown.\nattached as certain properties to listen for specific events during the\nlifecycle of the queue.\n\n### Example\n```javascript\n\n// create a queue object with concurrency 2\nvar q = async.queue(function(task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n};\n\n// add some items to the queue\nq.push({name: 'foo'}, function(err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n    console.log('finished processing item');\n});\n\n// add some items to the front of the queue\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nCreates a `queue` object with the specified `concurrency`. Tasks added to the\n`queue` are processed in parallel (up to the `concurrency` limit). If all\n`worker`s are in progress, the task is queued until one becomes available.\nOnce a `worker` completes a `task`, that `task`'s callback is called.\n\ntask, which must call its `callback(err)` argument when finished, with an\noptional `error` as an argument.  If you want to handle errors from an\nindividual task, pass a callback to `q.push()`. Invoked with\n(task, callback).\n`worker` functions should be run in parallel.  If omitted, the concurrency\ndefaults to `1`.  If the concurrency is `0`, an error is thrown.\nattached as certain properties to listen for specific events during the\nlifecycle of the queue.\n\n### Example\n```javascript\n\n// create a queue object with concurrency 2\nvar q = async.queue(function(task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n};\n\n// add some items to the queue\nq.push({name: 'foo'}, function(err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n    console.log('finished processing item');\n});\n\n// add some items to the front of the queue\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n```\n\n","context":[]}],"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","queue"]],"name":"queue","delimiter":"."}],"sanitaryName":"queue","baseTagPath":"../../../../"}