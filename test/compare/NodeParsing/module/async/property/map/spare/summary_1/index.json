{"elemID":"component_454","date":"6/5/2020","time":"12:00am","name":"summary","pathname":"summary","pathstr":"async.map~summary","path":[["/","async"],[".","map"],["~","summary"]],"flags":[],"source":[["/","async"],[".","map"]],"sourcestr":"async.map","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"spare","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":true,"isModule":false,"isClass":false,"simpleCtype":"spare","hideCtype":false,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"doc":[{"doc":"\n\nProduces a new collection of values by mapping each value in `coll` through\nthe `iteratee` function. The `iteratee` is called with an item from `coll`\nand a callback for when it has finished processing. Each of these callback\ntakes 2 arguments: an `error`, and the transformed item from `coll`. If\n`iteratee` passes an error to its callback, the main `callback` (for the\n`map` function) is immediately called with the error.\n\nNote, that since this function applies the `iteratee` to each item in\nparallel, there is no guarantee that the `iteratee` functions will complete\nin order. However, the results array will be in the same order as the\noriginal `coll`.\n\nIf `map` is passed an Object, the results will be an Array.  The results\nwill roughly be in the order of the original Objects' keys (but this can\nvary across JavaScript engines)\n\nThe iteratee is passed a `callback(err, transformed)` which must be called\nonce it has completed with an error (which can be `null`) and a\ntransformed item. Invoked with (item, callback).\nfunctions have finished, or an error occurs. Results is an Array of the\ntransformed items from the `coll`. Invoked with (err, results).\n\n### Example\n```javascript\n\nasync.map(['file1','file2','file3'], fs.stat, function(err, results) {\n    // results is now an array of stats for each file\n});\n\n```\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","map"]],"name":"map","delimiter":"."},{"path":[["/","async"],[".","map"],["~","summary"]],"name":"summary","delimiter":"~"}],"sanitaryName":"summary_1","baseTagPath":"../../../../../../"}
