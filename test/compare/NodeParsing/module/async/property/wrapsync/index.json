{"elemID":"component_889","date":"6/5/2020","time":"12:00am","name":"wrapSync","pathname":"wrapSync","pathstr":"async.wrapSync","path":[["/","async"],[".","wrapSync"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_886","date":"6/5/2020","time":"12:00am","pathname":"","pathstr":"async.wrapSync(0","path":[["/","async"],[".","asyncify"],["(","func"]],"flags":[],"source":[["/","async"],[".","wrapSync"]],"sourcestr":"async.wrapSync","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","wrapSync"]],"name":"wrapSync","delimiter":"."},{"path":[["/","async"],[".","wrapSync"],["(",0]],"name":"","delimiter":"("}],"aliasTo":{"path":[["/","async"],[".","asyncify"],["(","func"]],"pathstr":"async.asyncify(0"},"sanitaryName":"0"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"sourceFile":"dist\\async.js","sourceLine":5213,"summaryDoc":[{"doc":"\n\nTake a sync function and make it async, passing its return value to a\ncallback. This is useful for plugging sync functions into a waterfall,\nseries, or other async functions. Any arguments passed to the generated\nfunction will be passed to the wrapped function (except for the final\ncallback argument). Errors thrown will be passed to the callback.\n\nIf the function passed to `asyncify` returns a Promise, that promises's\nresolved/rejected state will be used to call the callback, rather than simply\nthe synchronous return value.\n\nThis also means you can asyncify ES2016 `async` functions.\n\nasynchronous function.\n(callback).\n\n### Example\n```javascript\n\n// passing a regular synchronous function\nasync.waterfall([\n    async.apply(fs.readFile, filename, \"utf8\"),\n    async.asyncify(JSON.parse),\n    function (data, next) {\n        // data is the result of parsing the text.\n        // If there was a parsing error, it would have been caught.\n    }\n], callback);\n\n// passing a function returning a promise\nasync.waterfall([\n    async.apply(fs.readFile, filename, \"utf8\"),\n    async.asyncify(function (contents) {\n        return db.model.create(contents);\n    }),\n    function (model, next) {\n        // `model` is the instantiated model object.\n        // If there was an error, this function would be skipped.\n    }\n], callback);\n\n// es6 example\nvar q = async.queue(async.asyncify(async function(file) {\n    var intermediateStep = await processFile(file);\n    return await somePromise(intermediateStep)\n}));\n\nq.push(files);\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nTake a sync function and make it async, passing its return value to a\ncallback. This is useful for plugging sync functions into a waterfall,\nseries, or other async functions. Any arguments passed to the generated\nfunction will be passed to the wrapped function (except for the final\ncallback argument). Errors thrown will be passed to the callback.\n\nIf the function passed to `asyncify` returns a Promise, that promises's\nresolved/rejected state will be used to call the callback, rather than simply\nthe synchronous return value.\n\nThis also means you can asyncify ES2016 `async` functions.\n\nasynchronous function.\n(callback).\n\n### Example\n```javascript\n\n// passing a regular synchronous function\nasync.waterfall([\n    async.apply(fs.readFile, filename, \"utf8\"),\n    async.asyncify(JSON.parse),\n    function (data, next) {\n        // data is the result of parsing the text.\n        // If there was a parsing error, it would have been caught.\n    }\n], callback);\n\n// passing a function returning a promise\nasync.waterfall([\n    async.apply(fs.readFile, filename, \"utf8\"),\n    async.asyncify(function (contents) {\n        return db.model.create(contents);\n    }),\n    function (model, next) {\n        // `model` is the instantiated model object.\n        // If there was an error, this function would be skipped.\n    }\n], callback);\n\n// es6 example\nvar q = async.queue(async.asyncify(async function(file) {\n    var intermediateStep = await processFile(file);\n    return await somePromise(intermediateStep)\n}));\n\nq.push(files);\n\n```\n\n","context":[]}],"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","wrapSync"]],"name":"wrapSync","delimiter":"."}],"sanitaryName":"wrapsync","baseTagPath":"../../../../"}
