{"elemID":"component_264","date":"6/5/2020","time":"12:00am","name":"auto","pathname":"auto","pathstr":"async.auto","path":[["/","async"],[".","auto"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_259","date":"6/5/2020","time":"12:00am","name":"tasks","pathname":"tasks","pathstr":"async.auto(tasks","path":[["/","async"],[".","auto"],["(","tasks"]],"flags":[],"source":[["/","async"],[".","auto"]],"sourcestr":"async.auto","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","auto"]],"name":"auto","delimiter":"."},{"path":[["/","async"],[".","auto"],["(","tasks"]],"name":"tasks","delimiter":"("}]},{"elemID":"component_260","date":"6/5/2020","time":"12:00am","name":"concurrency","pathname":"concurrency","pathstr":"async.auto(concurrency","path":[["/","async"],[".","auto"],["(","concurrency"]],"flags":[],"source":[["/","async"],[".","auto"]],"sourcestr":"async.auto","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","auto"]],"name":"auto","delimiter":"."},{"path":[["/","async"],[".","auto"],["(","concurrency"]],"name":"concurrency","delimiter":"("}]},{"elemID":"component_261","date":"6/5/2020","time":"12:00am","name":"callback","pathname":"callback","pathstr":"async.auto(callback","path":[["/","async"],[".","auto"],["(","callback"]],"flags":[],"source":[["/","async"],[".","auto"]],"sourcestr":"async.auto","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","auto"]],"name":"auto","delimiter":"."},{"path":[["/","async"],[".","auto"],["(","callback"]],"name":"callback","delimiter":"("}]}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"summaryDoc":[{"doc":"\n\nDetermines the best order for running the functions in `tasks`, based on\ntheir requirements. Each function can optionally depend on other functions\nbeing completed first, and each function is run as soon as its requirements\nare satisfied.\n\nIf any of the functions pass an error to their callback, the `auto` sequence\nwill stop. Further tasks will not execute (so any other functions depending\non it will not run), and the main `callback` is immediately called with the\nerror.\n\nFunctions also receive an object containing the results of functions which\nhave completed so far as the first argument, if they have dependencies. If a\ntask function has no dependencies, it will only be passed a callback.\n\nfunction or an array of requirements, with the function itself the last item\nin the array. The object's key of a property serves as the name of the task\ndefined by that property, i.e. can be used when specifying requirements for\nother tasks. The function receives one or two arguments:\n* a `results` object, containing the results of the previously executed\nfunctions, only passed if the task has any dependencies,\n* a `callback(err, result)` function, which must be called when finished,\npassing an `error` (which can be `null`) and the result of the function's\nexecution.\ndetermining the maximum number of tasks that can be run in parallel. By\ndefault, as many as possible.\nthe tasks have been completed. It receives the `err` argument if any `tasks`\npass an error to their callback. Results are always returned; however, if an\nerror occurs, no further `tasks` will be performed, and the results object\nwill only contain partial results. Invoked with (err, results).\n\n### Example\n```javascript\n\nasync.auto({\n// this function will just be passed a callback\nreadData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\nshowData: ['readData', function(results, cb) {\n// results.readData is the file's contents\n// ...\n}]\n}, callback);\n\nasync.auto({\nget_data: function(callback) {\nconsole.log('in get_data');\n// async code to get some data\ncallback(null, 'data', 'converted to array');\n},\nmake_folder: function(callback) {\nconsole.log('in make_folder');\n// async code to create a directory to store a file in\n// this is run at the same time as getting the data\ncallback(null, 'folder');\n},\nwrite_file: ['get_data', 'make_folder', function(results, callback) {\nconsole.log('in write_file', JSON.stringify(results));\n// once there is some data and the directory exists,\n// write the data to a file in the directory\ncallback(null, 'filename');\n}],\nemail_link: ['write_file', function(results, callback) {\nconsole.log('in email_link', JSON.stringify(results));\n// once the file is written let's email a link to it...\n// results.write_file contains the filename returned by write_file.\ncallback(null, {'file':results.write_file, 'email':'user@example.com'});\n}]\n}, function(err, results) {\nconsole.log('err = ', err);\nconsole.log('results = ', results);\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nDetermines the best order for running the functions in `tasks`, based on\ntheir requirements. Each function can optionally depend on other functions\nbeing completed first, and each function is run as soon as its requirements\nare satisfied.\n\nIf any of the functions pass an error to their callback, the `auto` sequence\nwill stop. Further tasks will not execute (so any other functions depending\non it will not run), and the main `callback` is immediately called with the\nerror.\n\nFunctions also receive an object containing the results of functions which\nhave completed so far as the first argument, if they have dependencies. If a\ntask function has no dependencies, it will only be passed a callback.\n\nfunction or an array of requirements, with the function itself the last item\nin the array. The object's key of a property serves as the name of the task\ndefined by that property, i.e. can be used when specifying requirements for\nother tasks. The function receives one or two arguments:\n* a `results` object, containing the results of the previously executed\nfunctions, only passed if the task has any dependencies,\n* a `callback(err, result)` function, which must be called when finished,\npassing an `error` (which can be `null`) and the result of the function's\nexecution.\ndetermining the maximum number of tasks that can be run in parallel. By\ndefault, as many as possible.\nthe tasks have been completed. It receives the `err` argument if any `tasks`\npass an error to their callback. Results are always returned; however, if an\nerror occurs, no further `tasks` will be performed, and the results object\nwill only contain partial results. Invoked with (err, results).\n\n### Example\n```javascript\n\nasync.auto({\n// this function will just be passed a callback\nreadData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\nshowData: ['readData', function(results, cb) {\n// results.readData is the file's contents\n// ...\n}]\n}, callback);\n\nasync.auto({\nget_data: function(callback) {\nconsole.log('in get_data');\n// async code to get some data\ncallback(null, 'data', 'converted to array');\n},\nmake_folder: function(callback) {\nconsole.log('in make_folder');\n// async code to create a directory to store a file in\n// this is run at the same time as getting the data\ncallback(null, 'folder');\n},\nwrite_file: ['get_data', 'make_folder', function(results, callback) {\nconsole.log('in write_file', JSON.stringify(results));\n// once there is some data and the directory exists,\n// write the data to a file in the directory\ncallback(null, 'filename');\n}],\nemail_link: ['write_file', function(results, callback) {\nconsole.log('in email_link', JSON.stringify(results));\n// once the file is written let's email a link to it...\n// results.write_file contains the filename returned by write_file.\ncallback(null, {'file':results.write_file, 'email':'user@example.com'});\n}]\n}, function(err, results) {\nconsole.log('err = ', err);\nconsole.log('results = ', results);\n});\n\n```\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","auto"]],"name":"auto","delimiter":"."}],"baseTagPath":"../../../../"}