{"elemID":"component_258","date":"6/5/2020","time":"12:00am","name":"cargo","pathname":"cargo","pathstr":"async.cargo","path":[["/","async"],[".","cargo"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_254","date":"6/5/2020","time":"12:00am","name":"worker","pathname":"worker","pathstr":"async.cargo(worker","path":[["/","async"],[".","cargo"],["(","worker"]],"flags":[],"source":[["/","async"],[".","cargo"]],"sourcestr":"async.cargo","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_252","date":"6/5/2020","time":"12:00am","name":"","pathname":"unnamed_8","pathstr":"async.cargo(worker(unnamed_8","path":[["/","async"],[".","cargo"],["(","worker"],["(","unnamed_8"]],"flags":[],"source":[["/","async"],[".","cargo"],["(","worker"]],"sourcestr":"async.cargo(worker","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","cargo"]],"name":"cargo","delimiter":"."},{"path":[["/","async"],[".","cargo"],["(","worker"]],"name":"worker","delimiter":"("},{"path":[["/","async"],[".","cargo"],["(","worker"],["(","unnamed_8"]],"name":"unnamed_8","delimiter":"("}],"sanitaryName":"unnamed_8"},{"elemID":"component_253","date":"6/5/2020","time":"12:00am","name":"","pathname":"unnamed_9","pathstr":"async.cargo(worker(unnamed_9","path":[["/","async"],[".","cargo"],["(","worker"],["(","unnamed_9"]],"flags":[],"source":[["/","async"],[".","cargo"],["(","worker"]],"sourcestr":"async.cargo(worker","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","cargo"]],"name":"cargo","delimiter":"."},{"path":[["/","async"],[".","cargo"],["(","worker"]],"name":"worker","delimiter":"("},{"path":[["/","async"],[".","cargo"],["(","worker"],["(","unnamed_9"]],"name":"unnamed_9","delimiter":"("}],"sanitaryName":"unnamed_9"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","cargo"]],"name":"cargo","delimiter":"."},{"path":[["/","async"],[".","cargo"],["(","worker"]],"name":"worker","delimiter":"("}],"sanitaryName":"worker"},{"elemID":"component_255","date":"6/5/2020","time":"12:00am","name":"payload","pathname":"payload","pathstr":"async.cargo(payload","path":[["/","async"],[".","cargo"],["(","payload"]],"flags":[],"source":[["/","async"],[".","cargo"]],"sourcestr":"async.cargo","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","cargo"]],"name":"cargo","delimiter":"."},{"path":[["/","async"],[".","cargo"],["(","payload"]],"name":"payload","delimiter":"("}],"sanitaryName":"payload"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"summaryDoc":[{"doc":"\n\nCreates a `cargo` object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the `payload` limit). If the\n`worker` is in progress, the task is queued until it becomes available. Once\nthe `worker` has completed some tasks, each callback of those tasks is\ncalled. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\nfor how `cargo` and `queue` work.\n\nWhile [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\nat a time, cargo passes an array of tasks to a single worker, repeating\nwhen the worker is finished.\n\nof queued tasks, which must call its `callback(err)` argument when finished,\nwith an optional `err` argument. Invoked with `(tasks, callback)`.\nhow many tasks should be processed per round; if omitted, the default is\nunlimited.\nattached as certain properties to listen for specific events during the\nlifecycle of the cargo and inner queue.\n\n### Example\n```javascript\n\n// create a cargo object with payload 2\nvar cargo = async.cargo(function(tasks, callback) {\n    for (var i=0; i<tasks.length; i++) {\n        console.log('hello ' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n// add some items\ncargo.push({name: 'foo'}, function(err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function(err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function(err) {\n    console.log('finished processing baz');\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nCreates a `cargo` object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the `payload` limit). If the\n`worker` is in progress, the task is queued until it becomes available. Once\nthe `worker` has completed some tasks, each callback of those tasks is\ncalled. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\nfor how `cargo` and `queue` work.\n\nWhile [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\nat a time, cargo passes an array of tasks to a single worker, repeating\nwhen the worker is finished.\n\nof queued tasks, which must call its `callback(err)` argument when finished,\nwith an optional `err` argument. Invoked with `(tasks, callback)`.\nhow many tasks should be processed per round; if omitted, the default is\nunlimited.\nattached as certain properties to listen for specific events during the\nlifecycle of the cargo and inner queue.\n\n### Example\n```javascript\n\n// create a cargo object with payload 2\nvar cargo = async.cargo(function(tasks, callback) {\n    for (var i=0; i<tasks.length; i++) {\n        console.log('hello ' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n// add some items\ncargo.push({name: 'foo'}, function(err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function(err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function(err) {\n    console.log('finished processing baz');\n});\n\n```\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","cargo"]],"name":"cargo","delimiter":"."}],"sanitaryName":"cargo","baseTagPath":"../../../../"}