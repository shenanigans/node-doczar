{"elemID":"component_791","date":"6/5/2020","time":"12:00am","name":"find","pathname":"find","pathstr":"async.find","path":[["/","async"],[".","find"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_785","date":"6/5/2020","time":"12:00am","pathname":"","pathstr":"async.find(0","path":[["/","async"],[".","detect"],["(","arr"]],"flags":[],"source":[["/","async"],[".","find"]],"sourcestr":"async.find","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","find"]],"name":"find","delimiter":"."},{"path":[["/","async"],[".","find"],["(",0]],"name":"","delimiter":"("}],"aliasTo":{"path":[["/","async"],[".","detect"],["(","arr"]],"pathstr":"async.detect(0"},"sanitaryName":"~0"},{"elemID":"component_786","date":"6/5/2020","time":"12:00am","pathname":"","pathstr":"async.find(1","path":[["/","async"],[".","detect"],["(","limit"]],"flags":[],"source":[["/","async"],[".","find"]],"sourcestr":"async.find","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","find"]],"name":"find","delimiter":"."},{"path":[["/","async"],[".","find"],["(",1]],"name":"","delimiter":"("}],"aliasTo":{"path":[["/","async"],[".","detect"],["(","limit"]],"pathstr":"async.detect(1"},"sanitaryName":"1"},{"elemID":"component_787","date":"6/5/2020","time":"12:00am","pathname":"","pathstr":"async.find(2","path":[["/","async"],[".","detect"],["(","iteratee"]],"flags":[],"source":[["/","async"],[".","find"]],"sourcestr":"async.find","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","find"]],"name":"find","delimiter":"."},{"path":[["/","async"],[".","find"],["(",2]],"name":"","delimiter":"("}],"aliasTo":{"path":[["/","async"],[".","detect"],["(","iteratee"]],"pathstr":"async.detect(2"},"sanitaryName":"2"},{"elemID":"component_788","date":"6/5/2020","time":"12:00am","pathname":"","pathstr":"async.find(3","path":[["/","async"],[".","detect"],["(","cb"]],"flags":[],"source":[["/","async"],[".","find"]],"sourcestr":"async.find","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","find"]],"name":"find","delimiter":"."},{"path":[["/","async"],[".","find"],["(",3]],"name":"","delimiter":"("}],"aliasTo":{"path":[["/","async"],[".","detect"],["(","cb"]],"pathstr":"async.detect(3"},"sanitaryName":"3"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"sourceFile":"dist\\async.js","sourceLine":5198,"summaryDoc":[{"doc":"\n\nReturns the first value in `coll` that passes an async truth test. The\n`iteratee` is applied in parallel, meaning the first iteratee to return\n`true` will fire the detect `callback` with that result. That means the\nresult might not be the first item in the original `coll` (in terms of order)\nthat passes the test.\n\nIf order within the original `coll` is important, then look at\n[`detectSeries`]{@link module:Collections.detectSeries}.\n\nThe iteratee is passed a `callback(err, truthValue)` which must be called\nwith a boolean argument once it has completed. Invoked with (item, callback).\niteratee returns `true`, or after all the `iteratee` functions have finished.\nResult will be the first item in the array that passes the truth test\n(iteratee) or the value `undefined` if none passed. Invoked with\n(err, result).\n\n### Example\n```javascript\n\nasync.detect(['file1','file2','file3'], function(filePath, callback) {\n    fs.access(filePath, function(err) {\n        callback(null, !err)\n    });\n}, function(err, result) {\n    // result now equals the first file in the list that exists\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nReturns the first value in `coll` that passes an async truth test. The\n`iteratee` is applied in parallel, meaning the first iteratee to return\n`true` will fire the detect `callback` with that result. That means the\nresult might not be the first item in the original `coll` (in terms of order)\nthat passes the test.\n\nIf order within the original `coll` is important, then look at\n[`detectSeries`]{@link module:Collections.detectSeries}.\n\nThe iteratee is passed a `callback(err, truthValue)` which must be called\nwith a boolean argument once it has completed. Invoked with (item, callback).\niteratee returns `true`, or after all the `iteratee` functions have finished.\nResult will be the first item in the array that passes the truth test\n(iteratee) or the value `undefined` if none passed. Invoked with\n(err, result).\n\n### Example\n```javascript\n\nasync.detect(['file1','file2','file3'], function(filePath, callback) {\n    fs.access(filePath, function(err) {\n        callback(null, !err)\n    });\n}, function(err, result) {\n    // result now equals the first file in the list that exists\n});\n\n```\n\n","context":[]}],"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","find"]],"name":"find","delimiter":"."}],"sanitaryName":"find","baseTagPath":"../../../../"}
