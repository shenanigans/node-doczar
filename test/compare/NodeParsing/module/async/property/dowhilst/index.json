{"elemID":"component_288","date":"6/5/2020","time":"12:00am","name":"doWhilst","pathname":"doWhilst","pathstr":"async.doWhilst","path":[["/","async"],[".","doWhilst"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_283","date":"6/5/2020","time":"12:00am","name":"iteratee","pathname":"iteratee","pathstr":"async.doWhilst(iteratee","path":[["/","async"],[".","doWhilst"],["(","iteratee"]],"flags":[],"source":[["/","async"],[".","doWhilst"]],"sourcestr":"async.doWhilst","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","doWhilst"]],"name":"doWhilst","delimiter":"."},{"path":[["/","async"],[".","doWhilst"],["(","iteratee"]],"name":"iteratee","delimiter":"("}]},{"elemID":"component_284","date":"6/5/2020","time":"12:00am","name":"test","pathname":"test","pathstr":"async.doWhilst(test","path":[["/","async"],[".","doWhilst"],["(","test"]],"flags":[],"source":[["/","async"],[".","doWhilst"]],"sourcestr":"async.doWhilst","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","doWhilst"]],"name":"doWhilst","delimiter":"."},{"path":[["/","async"],[".","doWhilst"],["(","test"]],"name":"test","delimiter":"("}]},{"elemID":"component_285","date":"6/5/2020","time":"12:00am","name":"callback","pathname":"callback","pathstr":"async.doWhilst(callback","path":[["/","async"],[".","doWhilst"],["(","callback"]],"flags":[],"source":[["/","async"],[".","doWhilst"]],"sourcestr":"async.doWhilst","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","doWhilst"]],"name":"doWhilst","delimiter":"."},{"path":[["/","async"],[".","doWhilst"],["(","callback"]],"name":"callback","delimiter":"("}]}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"summaryDoc":[{"doc":"\n*\n     * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n     * the order of operations, the arguments `test` and `iteratee` are switched.\n     *\n     * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n     *\n     * @name doWhilst\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.whilst]{@link module:ControlFlow.whilst}\n     * @category Control Flow\n     * @param {Function} iteratee - A function which is called each time `test`\n     * passes. The function is passed a `callback(err)`, which must be called once\n     * it has completed with an optional `err` argument. Invoked with (callback).\n     * @param {Function} test - synchronous truth test to perform after each\n     * execution of `iteratee`. Invoked with Invoked with the non-error callback\n     * results of `iteratee`.\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has failed and repeated execution of `iteratee` has stopped.\n     * `callback` will be passed an error and any arguments passed to the final\n     * `iteratee`'s callback. Invoked with (err, [results]);\n","context":[]}],"details":[{"doc":"\n*\n     * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n     * the order of operations, the arguments `test` and `iteratee` are switched.\n     *\n     * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n     *\n     * @name doWhilst\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.whilst]{@link module:ControlFlow.whilst}\n     * @category Control Flow\n     * @param {Function} iteratee - A function which is called each time `test`\n     * passes. The function is passed a `callback(err)`, which must be called once\n     * it has completed with an optional `err` argument. Invoked with (callback).\n     * @param {Function} test - synchronous truth test to perform after each\n     * execution of `iteratee`. Invoked with Invoked with the non-error callback\n     * results of `iteratee`.\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has failed and repeated execution of `iteratee` has stopped.\n     * `callback` will be passed an error and any arguments passed to the final\n     * `iteratee`'s callback. Invoked with (err, [results]);\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","doWhilst"]],"name":"doWhilst","delimiter":"."}],"baseTagPath":"../../../../"}