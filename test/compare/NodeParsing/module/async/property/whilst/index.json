{"elemID":"component_494","date":"6/5/2020","time":"12:00am","name":"whilst","pathname":"whilst","pathstr":"async.whilst","path":[["/","async"],[".","whilst"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_489","date":"6/5/2020","time":"12:00am","name":"test","pathname":"test","pathstr":"async.whilst(test","path":[["/","async"],[".","whilst"],["(","test"]],"flags":[],"source":[["/","async"],[".","whilst"]],"sourcestr":"async.whilst","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","whilst"]],"name":"whilst","delimiter":"."},{"path":[["/","async"],[".","whilst"],["(","test"]],"name":"test","delimiter":"("}]},{"elemID":"component_490","date":"6/5/2020","time":"12:00am","name":"iteratee","pathname":"iteratee","pathstr":"async.whilst(iteratee","path":[["/","async"],[".","whilst"],["(","iteratee"]],"flags":[],"source":[["/","async"],[".","whilst"]],"sourcestr":"async.whilst","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","whilst"]],"name":"whilst","delimiter":"."},{"path":[["/","async"],[".","whilst"],["(","iteratee"]],"name":"iteratee","delimiter":"("}]},{"elemID":"component_491","date":"6/5/2020","time":"12:00am","name":"callback","pathname":"callback","pathstr":"async.whilst(callback","path":[["/","async"],[".","whilst"],["(","callback"]],"flags":[],"source":[["/","async"],[".","whilst"]],"sourcestr":"async.whilst","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","whilst"]],"name":"whilst","delimiter":"."},{"path":[["/","async"],[".","whilst"],["(","callback"]],"name":"callback","delimiter":"("}]}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"summaryDoc":[{"doc":"\n*\n     * Repeatedly call `fn`, while `test` returns `true`. Calls `callback` when\n     * stopped, or an error occurs.\n     *\n     * @name whilst\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Function} test - synchronous truth test to perform before each\n     * execution of `fn`. Invoked with ().\n     * @param {Function} iteratee - A function which is called each time `test` passes.\n     * The function is passed a `callback(err)`, which must be called once it has\n     * completed with an optional `err` argument. Invoked with (callback).\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has failed and repeated execution of `fn` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `fn`'s\n     * callback. Invoked with (err, [results]);\n     * @returns undefined\n     * @example\n     *\n     * var count = 0;\n     * async.whilst(\n     *     function() { return count < 5; },\n     *     function(callback) {\n     *         count++;\n     *         setTimeout(function() {\n     *             callback(null, count);\n     *         }, 1000);\n     *     },\n     *     function (err, n) {\n     *         // 5 seconds have passed, n = 5\n     *     }\n     * );\n","context":[]}],"details":[{"doc":"\n*\n     * Repeatedly call `fn`, while `test` returns `true`. Calls `callback` when\n     * stopped, or an error occurs.\n     *\n     * @name whilst\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Function} test - synchronous truth test to perform before each\n     * execution of `fn`. Invoked with ().\n     * @param {Function} iteratee - A function which is called each time `test` passes.\n     * The function is passed a `callback(err)`, which must be called once it has\n     * completed with an optional `err` argument. Invoked with (callback).\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has failed and repeated execution of `fn` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `fn`'s\n     * callback. Invoked with (err, [results]);\n     * @returns undefined\n     * @example\n     *\n     * var count = 0;\n     * async.whilst(\n     *     function() { return count < 5; },\n     *     function(callback) {\n     *         count++;\n     *         setTimeout(function() {\n     *             callback(null, count);\n     *         }, 1000);\n     *     },\n     *     function (err, n) {\n     *         // 5 seconds have passed, n = 5\n     *     }\n     * );\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","whilst"]],"name":"whilst","delimiter":"."}],"baseTagPath":"../../../../"}