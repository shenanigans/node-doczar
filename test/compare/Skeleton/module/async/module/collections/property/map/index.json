{"elemID":"component_1857","date":"6/5/2020","time":"12:00am","name":"map","pathname":"map","pathstr":"async/Collections.map","path":[["/","async"],["/","Collections"],[".","map"]],"flags":[],"source":[["/","async"],["/","Collections"]],"sourcestr":"async/Collections","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false},{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_1852","date":"6/5/2020","time":"12:00am","name":"obj","pathname":"obj","pathstr":"async/Collections.map(0","path":[["/","async"],["/","Collections"],[".","map"],["(","obj"]],"flags":[],"source":[["/","async"],["/","Collections"],[".","map"]],"sourcestr":"async/Collections.map","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"summaryDoc":[{"doc":"\n..., callback","context":[]}],"details":[{"doc":"\n..., callback","context":[]}],"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","Collections"]],"name":"Collections","delimiter":"/"},{"path":[["/","async"],["/","Collections"],[".","map"]],"name":"map","delimiter":"."},{"path":[["/","async"],["/","Collections"],[".","map"],["(","obj"]],"name":"obj","delimiter":"("}],"sanitaryName":"obj"},{"elemID":"component_1853","date":"6/5/2020","time":"12:00am","name":"iteratee","pathname":"iteratee","pathstr":"async/Collections.map(1","path":[["/","async"],["/","Collections"],[".","map"],["(","iteratee"]],"flags":[],"source":[["/","async"],["/","Collections"],[".","map"]],"sourcestr":"async/Collections.map","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","Collections"]],"name":"Collections","delimiter":"/"},{"path":[["/","async"],["/","Collections"],[".","map"]],"name":"map","delimiter":"."},{"path":[["/","async"],["/","Collections"],[".","map"],["(","iteratee"]],"name":"iteratee","delimiter":"("}],"sanitaryName":"iteratee"},{"elemID":"component_1854","date":"6/5/2020","time":"12:00am","name":"callback","pathname":"callback","pathstr":"async/Collections.map(2","path":[["/","async"],["/","Collections"],[".","map"],["(","callback"]],"flags":[],"source":[["/","async"],["/","Collections"],[".","map"]],"sourcestr":"async/Collections.map","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","Collections"]],"name":"Collections","delimiter":"/"},{"path":[["/","async"],["/","Collections"],[".","map"]],"name":"map","delimiter":"."},{"path":[["/","async"],["/","Collections"],[".","map"],["(","callback"]],"name":"callback","delimiter":"("}],"sanitaryName":"callback"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"sourceFile":"dist\\async.js","sourceLine":1114,"summaryDoc":[{"doc":"\n\nProduces a new collection of values by mapping each value in `coll` through\nthe `iteratee` function. The `iteratee` is called with an item from `coll`\nand a callback for when it has finished processing. Each of these callback\ntakes 2 arguments: an `error`, and the transformed item from `coll`. If\n`iteratee` passes an error to its callback, the main `callback` (for the\n`map` function) is immediately called with the error.\n\nNote, that since this function applies the `iteratee` to each item in\nparallel, there is no guarantee that the `iteratee` functions will complete\nin order. However, the results array will be in the same order as the\noriginal `coll`.\n\nIf `map` is passed an Object, the results will be an Array.  The results\nwill roughly be in the order of the original Objects' keys (but this can\nvary across JavaScript engines)\n\n\n### Example\n```javascript\nfunctions have finished, or an error occurs. Results is an Array of the\ntransformed items from the `coll`. Invoked with (err, results).\n\nasync.map(['file1','file2','file3'], fs.stat, function(err, results) {\n    // results is now an array of stats for each file\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nProduces a new collection of values by mapping each value in `coll` through\nthe `iteratee` function. The `iteratee` is called with an item from `coll`\nand a callback for when it has finished processing. Each of these callback\ntakes 2 arguments: an `error`, and the transformed item from `coll`. If\n`iteratee` passes an error to its callback, the main `callback` (for the\n`map` function) is immediately called with the error.\n\nNote, that since this function applies the `iteratee` to each item in\nparallel, there is no guarantee that the `iteratee` functions will complete\nin order. However, the results array will be in the same order as the\noriginal `coll`.\n\nIf `map` is passed an Object, the results will be an Array.  The results\nwill roughly be in the order of the original Objects' keys (but this can\nvary across JavaScript engines)\n\n\n### Example\n```javascript\nfunctions have finished, or an error occurs. Results is an Array of the\ntransformed items from the `coll`. Invoked with (err, results).\n\nasync.map(['file1','file2','file3'], fs.stat, function(err, results) {\n    // results is now an array of stats for each file\n});\n\n```\n\n","context":[]}],"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","Collections"]],"name":"Collections","delimiter":"/"},{"path":[["/","async"],["/","Collections"],[".","map"]],"name":"map","delimiter":"."}],"aliasTo":{"path":[["/","async"],["/","Collections"],[".","map"]],"pathstr":"async/Collections.map"},"sanitaryName":"map","baseTagPath":"../../../../../../"}
