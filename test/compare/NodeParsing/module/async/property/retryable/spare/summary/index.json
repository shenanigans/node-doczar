{"elemID":"component_438","date":"6/5/2020","time":"12:00am","name":"summary","pathname":"summary","pathstr":"async.retryable~summary","path":[["/","async"],[".","retryable"],["~","summary"]],"flags":[],"source":[["/","async"],[".","retryable"]],"sourcestr":"async.retryable","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"spare","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":true,"isModule":false,"isClass":false,"simpleCtype":"spare","hideCtype":false,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"doc":[{"doc":"\n*\n     * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method wraps a task and makes it\n     * retryable, rather than immediately calling it with retries.\n     *\n     * @name retryable\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.retry]{@link module:ControlFlow.retry}\n     * @category Control Flow\n     * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n     * options, exactly the same as from `retry`\n     * @param {Function} task - the asynchronous function to wrap\n     * @returns {Functions} The wrapped function, which when invoked, will retry on\n     * an error, based on the parameters specified in `opts`.\n     * @example\n     *\n     * async.auto({\n     *     dep1: async.retryable(3, getFromFlakyService),\n     *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n     *         maybeProcessData(results.dep1, cb);\n     *     })]\n     * }, callback);\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","retryable"]],"name":"retryable","delimiter":"."},{"path":[["/","async"],[".","retryable"],["~","summary"]],"name":"summary","delimiter":"~"}],"baseTagPath":"../../../../../../"}