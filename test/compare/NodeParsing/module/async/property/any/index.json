{"elemID":"component_771","date":"6/5/2020","time":"12:00am","name":"any","pathname":"any","pathstr":"async.any","path":[["/","async"],[".","any"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_765","date":"6/5/2020","time":"12:00am","pathname":"","pathstr":"async.any(0","path":[["/","async"],[".","some"],["(","arr"]],"flags":[],"source":[["/","async"],[".","any"]],"sourcestr":"async.any","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","any"]],"name":"any","delimiter":"."},{"path":[["/","async"],[".","any"],["(",0]],"name":"","delimiter":"("}],"aliasTo":{"path":[["/","async"],[".","some"],["(","arr"]],"pathstr":"async.some(0"},"sanitaryName":"0"},{"elemID":"component_766","date":"6/5/2020","time":"12:00am","pathname":"","pathstr":"async.any(1","path":[["/","async"],[".","some"],["(","limit"]],"flags":[],"source":[["/","async"],[".","any"]],"sourcestr":"async.any","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","any"]],"name":"any","delimiter":"."},{"path":[["/","async"],[".","any"],["(",1]],"name":"","delimiter":"("}],"aliasTo":{"path":[["/","async"],[".","some"],["(","limit"]],"pathstr":"async.some(1"},"sanitaryName":"1"},{"elemID":"component_767","date":"6/5/2020","time":"12:00am","pathname":"","pathstr":"async.any(2","path":[["/","async"],[".","some"],["(","iteratee"]],"flags":[],"source":[["/","async"],[".","any"]],"sourcestr":"async.any","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","any"]],"name":"any","delimiter":"."},{"path":[["/","async"],[".","any"],["(",2]],"name":"","delimiter":"("}],"aliasTo":{"path":[["/","async"],[".","some"],["(","iteratee"]],"pathstr":"async.some(2"},"sanitaryName":"2"},{"elemID":"component_768","date":"6/5/2020","time":"12:00am","pathname":"","pathstr":"async.any(3","path":[["/","async"],[".","some"],["(","cb"]],"flags":[],"source":[["/","async"],[".","any"]],"sourcestr":"async.any","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","any"]],"name":"any","delimiter":"."},{"path":[["/","async"],[".","any"],["(",3]],"name":"","delimiter":"("}],"aliasTo":{"path":[["/","async"],[".","some"],["(","cb"]],"pathstr":"async.some(3"},"sanitaryName":"3"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"sourceFile":"dist\\async.js","sourceLine":5195,"summaryDoc":[{"doc":"\n\nReturns `true` if at least one element in the `coll` satisfies an async test.\nIf any iteratee call returns `true`, the main `callback` is immediately\ncalled.\n\nin parallel. The iteratee is passed a `callback(err, truthValue)` which must\nbe called with a boolean argument once it has completed. Invoked with\n(item, callback).\niteratee returns `true`, or after all the iteratee functions have finished.\nResult will be either `true` or `false` depending on the values of the async\ntests. Invoked with (err, result).\n\n### Example\n```javascript\n\nasync.some(['file1','file2','file3'], function(filePath, callback) {\n    fs.access(filePath, function(err) {\n        callback(null, !err)\n    });\n}, function(err, result) {\n    // if result is true then at least one of the files exists\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nReturns `true` if at least one element in the `coll` satisfies an async test.\nIf any iteratee call returns `true`, the main `callback` is immediately\ncalled.\n\nin parallel. The iteratee is passed a `callback(err, truthValue)` which must\nbe called with a boolean argument once it has completed. Invoked with\n(item, callback).\niteratee returns `true`, or after all the iteratee functions have finished.\nResult will be either `true` or `false` depending on the values of the async\ntests. Invoked with (err, result).\n\n### Example\n```javascript\n\nasync.some(['file1','file2','file3'], function(filePath, callback) {\n    fs.access(filePath, function(err) {\n        callback(null, !err)\n    });\n}, function(err, result) {\n    // if result is true then at least one of the files exists\n});\n\n```\n\n","context":[]}],"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","any"]],"name":"any","delimiter":"."}],"sanitaryName":"any","baseTagPath":"../../../../"}
