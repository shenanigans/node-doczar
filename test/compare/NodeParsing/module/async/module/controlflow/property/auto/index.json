{"elemID":"component_978","date":"6/5/2020","time":"12:00am","name":"auto","pathname":"auto","pathstr":"async/ControlFlow.auto","path":[["/","async"],["/","ControlFlow"],[".","auto"]],"flags":[],"source":[["/","async"],["/","ControlFlow"]],"sourcestr":"async/ControlFlow","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isFunction":true,"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_973","date":"6/5/2020","time":"12:00am","name":"tasks","pathname":"tasks","pathstr":"async/ControlFlow.auto(0","path":[["/","async"],["/","ControlFlow"],[".","auto"],["(","tasks"]],"flags":[],"source":[["/","async"],["/","ControlFlow"],[".","auto"]],"sourcestr":"async/ControlFlow.auto","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[null,"Object"]],"isPointer":false,"isArray":false,"generics":[],"name":"Object","explicit":false}],"isFunction":false,"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"isInline":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"]],"name":"ControlFlow","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"],[".","auto"]],"name":"auto","delimiter":"."},{"path":[["/","async"],["/","ControlFlow"],[".","auto"],["(","tasks"]],"name":"tasks","delimiter":"("}],"sanitaryName":"tasks"},{"elemID":"component_974","date":"6/5/2020","time":"12:00am","name":"concurrency","pathname":"concurrency","pathstr":"async/ControlFlow.auto(1","path":[["/","async"],["/","ControlFlow"],[".","auto"],["(","concurrency"]],"flags":[],"source":[["/","async"],["/","ControlFlow"],[".","auto"]],"sourcestr":"async/ControlFlow.auto","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isFunction":false,"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"]],"name":"ControlFlow","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"],[".","auto"]],"name":"auto","delimiter":"."},{"path":[["/","async"],["/","ControlFlow"],[".","auto"],["(","concurrency"]],"name":"concurrency","delimiter":"("}],"sanitaryName":"concurrency"},{"elemID":"component_975","date":"6/5/2020","time":"12:00am","name":"callback","pathname":"callback","pathstr":"async/ControlFlow.auto(2","path":[["/","async"],["/","ControlFlow"],[".","auto"],["(","callback"]],"flags":[],"source":[["/","async"],["/","ControlFlow"],[".","auto"]],"sourcestr":"async/ControlFlow.auto","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isFunction":true,"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"]],"name":"ControlFlow","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"],[".","auto"]],"name":"auto","delimiter":"."},{"path":[["/","async"],["/","ControlFlow"],[".","auto"],["(","callback"]],"name":"callback","delimiter":"("}],"sanitaryName":"callback"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"summaryDoc":[{"doc":"\n\nDetermines the best order for running the functions in `tasks`, based on\ntheir requirements. Each function can optionally depend on other functions\nbeing completed first, and each function is run as soon as its requirements\nare satisfied.\n\nIf any of the functions pass an error to their callback, the `auto` sequence\nwill stop. Further tasks will not execute (so any other functions depending\non it will not run), and the main `callback` is immediately called with the\nerror.\n\nFunctions also receive an object containing the results of functions which\nhave completed so far as the first argument, if they have dependencies. If a\ntask function has no dependencies, it will only be passed a callback.\n\n\n### Example\n```javascript\n\nasync.auto({\n    // this function will just be passed a callback\n    readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n    showData: ['readData', function(results, cb) {\n        // results.readData is the file's contents\n        // ...\n    }]\n}, callback);\n\nasync.auto({\n    get_data: function(callback) {\n        console.log('in get_data');\n        // async code to get some data\n        callback(null, 'data', 'converted to array');\n    },\n    make_folder: function(callback) {\n        console.log('in make_folder');\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n        callback(null, 'folder');\n    },\n    write_file: ['get_data', 'make_folder', function(results, callback) {\n        console.log('in write_file', JSON.stringify(results));\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, 'filename');\n    }],\n    email_link: ['write_file', function(results, callback) {\n        console.log('in email_link', JSON.stringify(results));\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n        callback(null, {'file':results.write_file, 'email':'user@example.com'});\n    }]\n}, function(err, results) {\n    console.log('err = ', err);\n    console.log('results = ', results);\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nDetermines the best order for running the functions in `tasks`, based on\ntheir requirements. Each function can optionally depend on other functions\nbeing completed first, and each function is run as soon as its requirements\nare satisfied.\n\nIf any of the functions pass an error to their callback, the `auto` sequence\nwill stop. Further tasks will not execute (so any other functions depending\non it will not run), and the main `callback` is immediately called with the\nerror.\n\nFunctions also receive an object containing the results of functions which\nhave completed so far as the first argument, if they have dependencies. If a\ntask function has no dependencies, it will only be passed a callback.\n\n\n### Example\n```javascript\n\nasync.auto({\n    // this function will just be passed a callback\n    readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n    showData: ['readData', function(results, cb) {\n        // results.readData is the file's contents\n        // ...\n    }]\n}, callback);\n\nasync.auto({\n    get_data: function(callback) {\n        console.log('in get_data');\n        // async code to get some data\n        callback(null, 'data', 'converted to array');\n    },\n    make_folder: function(callback) {\n        console.log('in make_folder');\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n        callback(null, 'folder');\n    },\n    write_file: ['get_data', 'make_folder', function(results, callback) {\n        console.log('in write_file', JSON.stringify(results));\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, 'filename');\n    }],\n    email_link: ['write_file', function(results, callback) {\n        console.log('in email_link', JSON.stringify(results));\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n        callback(null, {'file':results.write_file, 'email':'user@example.com'});\n    }]\n}, function(err, results) {\n    console.log('err = ', err);\n    console.log('results = ', results);\n});\n\n```\n\n","context":[]}],"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"]],"name":"ControlFlow","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"],[".","auto"]],"name":"auto","delimiter":"."}],"sourceFile":"dist\\async.js","sourceLine":1538,"sourceModule":{"path":[["/","async"]],"pathstr":"async"},"sanitaryName":"auto","baseTagPath":"../../../../../../"}
