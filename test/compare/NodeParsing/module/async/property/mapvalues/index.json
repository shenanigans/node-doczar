{"elemID":"component_478","date":"6/5/2020","time":"12:00am","name":"mapValues","pathname":"mapValues","pathstr":"async.mapValues","path":[["/","async"],[".","mapValues"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_473","date":"6/5/2020","time":"12:00am","name":"iterable","pathname":"iterable","pathstr":"async.mapValues(0","path":[["/","async"],[".","mapValues"],["(","iterable"]],"flags":[],"source":[["/","async"],[".","mapValues"]],"sourcestr":"async.mapValues","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","mapValues"]],"name":"mapValues","delimiter":"."},{"path":[["/","async"],[".","mapValues"],["(","iterable"]],"name":"iterable","delimiter":"("}],"sanitaryName":"iterable"},{"elemID":"component_474","date":"6/5/2020","time":"12:00am","name":"iteratee","pathname":"iteratee","pathstr":"async.mapValues(1","path":[["/","async"],[".","mapValues"],["(","iteratee"]],"flags":[],"source":[["/","async"],[".","mapValues"]],"sourcestr":"async.mapValues","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","mapValues"]],"name":"mapValues","delimiter":"."},{"path":[["/","async"],[".","mapValues"],["(","iteratee"]],"name":"iteratee","delimiter":"("}],"sanitaryName":"iteratee"},{"elemID":"component_475","date":"6/5/2020","time":"12:00am","name":"callback","pathname":"callback","pathstr":"async.mapValues(2","path":[["/","async"],[".","mapValues"],["(","callback"]],"flags":[],"source":[["/","async"],[".","mapValues"]],"sourcestr":"async.mapValues","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","mapValues"]],"name":"mapValues","delimiter":"."},{"path":[["/","async"],[".","mapValues"],["(","callback"]],"name":"callback","delimiter":"("}],"sanitaryName":"callback"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"sourceFile":"dist\\async.js","sourceLine":5157,"summaryDoc":[{"doc":"\n\nA relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n\nProduces a new Object by mapping each value of `obj` through the `iteratee`\nfunction. The `iteratee` is called each `value` and `key` from `obj` and a\ncallback for when it has finished processing. Each of these callbacks takes\ntwo arguments: an `error`, and the transformed item from `obj`. If `iteratee`\npasses an error to its callback, the main `callback` (for the `mapValues`\nfunction) is immediately called with the error.\n\nNote, the order of the keys in the result is not guaranteed.  The keys will\nbe roughly in the order they complete, (but this is very engine-specific)\n\n`coll`. The iteratee is passed a `callback(err, transformed)` which must be\ncalled once it has completed with an error (which can be `null`) and a\ntransformed value. Invoked with (value, key, callback).\nfunctions have finished, or an error occurs. Results is an array of the\ntransformed items from the `obj`. Invoked with (err, result).\n\n### Example\n```javascript\n\nasync.mapValues({\n    f1: 'file1',\n    f2: 'file2',\n    f3: 'file3'\n}, function (file, key, callback) {\n  fs.stat(file, callback);\n}, function(err, result) {\n    // results is now a map of stats for each file, e.g.\n    // {\n    //     f1: [stats for file1],\n    //     f2: [stats for file2],\n    //     f3: [stats for file3]\n    // }\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nA relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n\nProduces a new Object by mapping each value of `obj` through the `iteratee`\nfunction. The `iteratee` is called each `value` and `key` from `obj` and a\ncallback for when it has finished processing. Each of these callbacks takes\ntwo arguments: an `error`, and the transformed item from `obj`. If `iteratee`\npasses an error to its callback, the main `callback` (for the `mapValues`\nfunction) is immediately called with the error.\n\nNote, the order of the keys in the result is not guaranteed.  The keys will\nbe roughly in the order they complete, (but this is very engine-specific)\n\n`coll`. The iteratee is passed a `callback(err, transformed)` which must be\ncalled once it has completed with an error (which can be `null`) and a\ntransformed value. Invoked with (value, key, callback).\nfunctions have finished, or an error occurs. Results is an array of the\ntransformed items from the `obj`. Invoked with (err, result).\n\n### Example\n```javascript\n\nasync.mapValues({\n    f1: 'file1',\n    f2: 'file2',\n    f3: 'file3'\n}, function (file, key, callback) {\n  fs.stat(file, callback);\n}, function(err, result) {\n    // results is now a map of stats for each file, e.g.\n    // {\n    //     f1: [stats for file1],\n    //     f2: [stats for file2],\n    //     f3: [stats for file3]\n    // }\n});\n\n```\n\n","context":[]}],"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","mapValues"]],"name":"mapValues","delimiter":"."}],"sanitaryName":"mapvalues","baseTagPath":"../../../../"}
