{"elemID":"component_721","date":"6/5/2020","time":"12:00am","name":"summary","pathname":"summary","pathstr":"async.transform~summary","path":[["/","async"],[".","transform"],["~","summary"]],"flags":[],"source":[["/","async"],[".","transform"]],"sourcestr":"async.transform","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"spare","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":true,"isModule":false,"isClass":false,"simpleCtype":"spare","hideCtype":false,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"doc":[{"doc":"\n\nA relative of `reduce`.  Takes an Object or Array, and iterates over each\nelement in series, each step potentially mutating an `accumulator` value.\nThe type of the accumulator defaults to the type of collection passed in.\n\nit will default to an empty Object or Array, depending on the type of `coll`\ncollection that potentially modifies the accumulator. The `iteratee` is\npassed a `callback(err)` which accepts an optional error as its first\nargument. If an error is passed to the callback, the transform is stopped\nand the main `callback` is immediately called with the error.\nInvoked with (accumulator, item, key, callback).\n`iteratee` functions have finished. Result is the transformed accumulator.\nInvoked with (err, result).\n\n### Example\n```javascript\n\nasync.transform([1,2,3], function(acc, item, index, callback) {\n    // pointless async:\n    process.nextTick(function() {\n        acc.push(item * 2)\n        callback(null)\n    });\n}, function(err, result) {\n    // result is now equal to [2, 4, 6]\n});\n\n```\n\n\n### Example\n```javascript\n\nasync.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n    setImmediate(function () {\n        obj[key] = val * 2;\n        callback();\n    })\n}, function (err, result) {\n    // result is equal to {a: 2, b: 4, c: 6}\n})\n\n```\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","transform"]],"name":"transform","delimiter":"."},{"path":[["/","async"],[".","transform"],["~","summary"]],"name":"summary","delimiter":"~"}],"sanitaryName":"summary_1","baseTagPath":"../../../../../../"}
