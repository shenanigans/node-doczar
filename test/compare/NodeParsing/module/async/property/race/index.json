{"elemID":"component_482","date":"6/5/2020","time":"12:00am","name":"race","pathname":"race","pathstr":"async.race","path":[["/","async"],[".","race"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_477","date":"6/5/2020","time":"12:00am","name":"tasks","pathname":"tasks","pathstr":"async.race(tasks","path":[["/","async"],[".","race"],["(","tasks"]],"flags":[],"source":[["/","async"],[".","race"]],"sourcestr":"async.race","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","race"]],"name":"race","delimiter":"."},{"path":[["/","async"],[".","race"],["(","tasks"]],"name":"tasks","delimiter":"("}],"sanitaryName":"tasks"},{"elemID":"component_479","date":"6/5/2020","time":"12:00am","name":"callback","pathname":"callback","pathstr":"async.race(callback","path":[["/","async"],[".","race"],["(","callback"]],"flags":[],"source":[["/","async"],[".","race"]],"sourcestr":"async.race","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_478","date":"6/5/2020","time":"12:00am","name":"","pathname":"unnamed_78","pathstr":"async.race(callback(unnamed_78","path":[["/","async"],[".","race"],["(","callback"],["(","unnamed_78"]],"flags":[],"source":[["/","async"],[".","race"],["(","callback"]],"sourcestr":"async.race(callback","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[".","TypeError"]],"isPointer":false,"isArray":false,"generics":[],"name":"TypeError"}],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","race"]],"name":"race","delimiter":"."},{"path":[["/","async"],[".","race"],["(","callback"]],"name":"callback","delimiter":"("},{"path":[["/","async"],[".","race"],["(","callback"],["(","unnamed_78"]],"name":"unnamed_78","delimiter":"("}],"sanitaryName":"unnamed_78"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","race"]],"name":"race","delimiter":"."},{"path":[["/","async"],[".","race"],["(","callback"]],"name":"callback","delimiter":"("}],"sanitaryName":"callback"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"summaryDoc":[{"doc":"\n\nRuns the `tasks` array of functions in parallel, without waiting until the\nprevious function has completed. Once any the `tasks` completed or pass an\nerror to its callback, the main `callback` is immediately called. It's\nequivalent to `Promise.race()`.\n\nis passed a `callback(err, result)` which it must call on completion with an\nerror `err` (which can be `null`) and an optional `result` value.\ncompleted. This function gets an error or result from the first function that\ncompleted. Invoked with (err, result).\n\n### Example\n```javascript\n\nasync.race([\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// main callback\nfunction(err, result) {\n    // the result will be equal to 'two' as it finishes earlier\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nRuns the `tasks` array of functions in parallel, without waiting until the\nprevious function has completed. Once any the `tasks` completed or pass an\nerror to its callback, the main `callback` is immediately called. It's\nequivalent to `Promise.race()`.\n\nis passed a `callback(err, result)` which it must call on completion with an\nerror `err` (which can be `null`) and an optional `result` value.\ncompleted. This function gets an error or result from the first function that\ncompleted. Invoked with (err, result).\n\n### Example\n```javascript\n\nasync.race([\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// main callback\nfunction(err, result) {\n    // the result will be equal to 'two' as it finishes earlier\n});\n\n```\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","race"]],"name":"race","delimiter":"."}],"sanitaryName":"race","baseTagPath":"../../../../"}