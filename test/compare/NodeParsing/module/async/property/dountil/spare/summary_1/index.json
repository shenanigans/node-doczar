{"elemID":"component_332","date":"6/5/2020","time":"12:00am","name":"summary","pathname":"summary","pathstr":"async.doUntil~summary","path":[["/","async"],[".","doUntil"],["~","summary"]],"flags":[],"source":[["/","async"],[".","doUntil"]],"sourcestr":"async.doUntil","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"spare","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":true,"isModule":false,"isClass":false,"simpleCtype":"spare","hideCtype":false,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"doc":[{"doc":"\n\nLike ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\nargument ordering differs from `until`.\n\nThe function is passed a `callback(err)`, which must be called once it has\ncompleted with an optional `err` argument. Invoked with (callback).\nexecution of `fn`. Invoked with the non-error callback results of `fn`.\nfunction has passed and repeated execution of `fn` has stopped. `callback`\nwill be passed an error and any arguments passed to the final `fn`'s\ncallback. Invoked with (err, [results]);\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","doUntil"]],"name":"doUntil","delimiter":"."},{"path":[["/","async"],[".","doUntil"],["~","summary"]],"name":"summary","delimiter":"~"}],"sanitaryName":"summary_1","baseTagPath":"../../../../../../"}
