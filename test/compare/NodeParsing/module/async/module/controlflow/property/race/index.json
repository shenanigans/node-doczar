{"elemID":"component_1117","date":"6/5/2020","time":"12:00am","name":"race","pathname":"race","pathstr":"async/ControlFlow.race","path":[["/","async"],["/","ControlFlow"],[".","race"]],"flags":[],"source":[["/","async"],["/","ControlFlow"]],"sourcestr":"async/ControlFlow","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isFunction":true,"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_1113","date":"6/5/2020","time":"12:00am","name":"tasks","pathname":"tasks","pathstr":"async/ControlFlow.race(0","path":[["/","async"],["/","ControlFlow"],[".","race"],["(","tasks"]],"flags":[],"source":[["/","async"],["/","ControlFlow"],[".","race"]],"sourcestr":"async/ControlFlow.race","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isFunction":false,"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"]],"name":"ControlFlow","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"],[".","race"]],"name":"race","delimiter":"."},{"path":[["/","async"],["/","ControlFlow"],[".","race"],["(","tasks"]],"name":"tasks","delimiter":"("}],"sanitaryName":"tasks"},{"elemID":"component_1114","date":"6/5/2020","time":"12:00am","name":"callback","pathname":"callback","pathstr":"async/ControlFlow.race(1","path":[["/","async"],["/","ControlFlow"],[".","race"],["(","callback"]],"flags":[],"source":[["/","async"],["/","ControlFlow"],[".","race"]],"sourcestr":"async/ControlFlow.race","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isFunction":true,"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"]],"name":"ControlFlow","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"],[".","race"]],"name":"race","delimiter":"."},{"path":[["/","async"],["/","ControlFlow"],[".","race"],["(","callback"]],"name":"callback","delimiter":"("}],"sanitaryName":"callback"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"summaryDoc":[{"doc":"\n\nRuns the `tasks` array of functions in parallel, without waiting until the\nprevious function has completed. Once any the `tasks` completed or pass an\nerror to its callback, the main `callback` is immediately called. It's\nequivalent to `Promise.race()`.\n\n\n### Example\n```javascript\n\nasync.race([\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// main callback\nfunction(err, result) {\n    // the result will be equal to 'two' as it finishes earlier\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nRuns the `tasks` array of functions in parallel, without waiting until the\nprevious function has completed. Once any the `tasks` completed or pass an\nerror to its callback, the main `callback` is immediately called. It's\nequivalent to `Promise.race()`.\n\n\n### Example\n```javascript\n\nasync.race([\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// main callback\nfunction(err, result) {\n    // the result will be equal to 'two' as it finishes earlier\n});\n\n```\n\n","context":[]}],"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"]],"name":"ControlFlow","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"],[".","race"]],"name":"race","delimiter":"."}],"aliasTo":{"path":[["/","async"],["/","ControlFlow"],[".","race"]],"pathstr":"async/ControlFlow.race"},"sourceFile":"dist\\async.js","sourceLine":3993,"sourceModule":{"path":[["/","async"]],"pathstr":"async"},"sanitaryName":"race","baseTagPath":"../../../../../../"}
