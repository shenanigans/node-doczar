{"elemID":"component_583","date":"6/5/2020","time":"12:00am","name":"summary","pathname":"summary","pathstr":"async.race~summary","path":[["/","async"],[".","race"],["~","summary"]],"flags":[],"source":[["/","async"],[".","race"]],"sourcestr":"async.race","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"spare","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":true,"isModule":false,"isClass":false,"simpleCtype":"spare","hideCtype":false,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"doc":[{"doc":"\n\nRuns the `tasks` array of functions in parallel, without waiting until the\nprevious function has completed. Once any the `tasks` completed or pass an\nerror to its callback, the main `callback` is immediately called. It's\nequivalent to `Promise.race()`.\n\nis passed a `callback(err, result)` which it must call on completion with an\nerror `err` (which can be `null`) and an optional `result` value.\ncompleted. This function gets an error or result from the first function that\ncompleted. Invoked with (err, result).\n\n### Example\n```javascript\n\nasync.race([\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// main callback\nfunction(err, result) {\n    // the result will be equal to 'two' as it finishes earlier\n});\n\n```\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","race"]],"name":"race","delimiter":"."},{"path":[["/","async"],[".","race"],["~","summary"]],"name":"summary","delimiter":"~"}],"sanitaryName":"summary","baseTagPath":"../../../../../../"}
