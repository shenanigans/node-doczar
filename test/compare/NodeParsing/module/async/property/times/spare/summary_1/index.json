{"elemID":"component_701","date":"6/5/2020","time":"12:00am","name":"summary","pathname":"summary","pathstr":"async.times~summary","path":[["/","async"],[".","times"],["~","summary"]],"flags":[],"source":[["/","async"],[".","times"]],"sourcestr":"async.times","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"spare","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":true,"isModule":false,"isClass":false,"simpleCtype":"spare","hideCtype":false,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"doc":[{"doc":"\n\nCalls the `iteratee` function `n` times, and accumulates results in the same\nmanner you would use with [map]{@link module:Collections.map}.\n\niteration index and a callback (n, next).\n\n### Example\n```javascript\n\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n    callback(null, {\n        id: 'user' + id\n    });\n};\n\n// generate 5 users\nasync.times(5, function(n, next) {\n    createUser(n, function(err, user) {\n        next(err, user);\n    });\n}, function(err, users) {\n    // we should now have 5 users\n});\n\n```\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","times"]],"name":"times","delimiter":"."},{"path":[["/","async"],[".","times"],["~","summary"]],"name":"summary","delimiter":"~"}],"sanitaryName":"summary_1","baseTagPath":"../../../../../../"}
