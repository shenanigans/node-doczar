{"elemID":"component_348","date":"6/5/2020","time":"12:00am","name":"each","pathname":"each","pathstr":"async.each","path":[["/","async"],[".","each"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_341","date":"6/5/2020","time":"12:00am","name":"coll","pathname":"coll","pathstr":"async.each(coll","path":[["/","async"],[".","each"],["(","coll"]],"flags":[],"source":[["/","async"],[".","each"]],"sourcestr":"async.each","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","each"]],"name":"each","delimiter":"."},{"path":[["/","async"],[".","each"],["(","coll"]],"name":"coll","delimiter":"("}],"sanitaryName":"coll"},{"elemID":"component_344","date":"6/5/2020","time":"12:00am","name":"iteratee","pathname":"iteratee","pathstr":"async.each(iteratee","path":[["/","async"],[".","each"],["(","iteratee"]],"flags":[],"source":[["/","async"],[".","each"]],"sourcestr":"async.each","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_342","date":"6/5/2020","time":"12:00am","name":"","pathname":"unnamed_39","pathstr":"async.each(iteratee(unnamed_39","path":[["/","async"],[".","each"],["(","iteratee"],["(","unnamed_39"]],"flags":[],"source":[["/","async"],[".","each"],["(","iteratee"]],"sourcestr":"async.each(iteratee","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","each"]],"name":"each","delimiter":"."},{"path":[["/","async"],[".","each"],["(","iteratee"]],"name":"iteratee","delimiter":"("},{"path":[["/","async"],[".","each"],["(","iteratee"],["(","unnamed_39"]],"name":"unnamed_39","delimiter":"("}],"sanitaryName":"unnamed_39"},{"elemID":"component_343","date":"6/5/2020","time":"12:00am","name":"","pathname":"unnamed_40","pathstr":"async.each(iteratee(unnamed_40","path":[["/","async"],[".","each"],["(","iteratee"],["(","unnamed_40"]],"flags":[],"source":[["/","async"],[".","each"],["(","iteratee"]],"sourcestr":"async.each(iteratee","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","each"]],"name":"each","delimiter":"."},{"path":[["/","async"],[".","each"],["(","iteratee"]],"name":"iteratee","delimiter":"("},{"path":[["/","async"],[".","each"],["(","iteratee"],["(","unnamed_40"]],"name":"unnamed_40","delimiter":"("}],"sanitaryName":"unnamed_40"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","each"]],"name":"each","delimiter":"."},{"path":[["/","async"],[".","each"],["(","iteratee"]],"name":"iteratee","delimiter":"("}],"sanitaryName":"iteratee"},{"elemID":"component_345","date":"6/5/2020","time":"12:00am","name":"callback","pathname":"callback","pathstr":"async.each(callback","path":[["/","async"],[".","each"],["(","callback"]],"flags":[],"source":[["/","async"],[".","each"]],"sourcestr":"async.each","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","each"]],"name":"each","delimiter":"."},{"path":[["/","async"],[".","each"],["(","callback"]],"name":"callback","delimiter":"("}],"sanitaryName":"callback"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"summaryDoc":[{"doc":"\n\nApplies the function `iteratee` to each item in `coll`, in parallel.\nThe `iteratee` is called with an item from the list, and a callback for when\nit has finished. If the `iteratee` passes an error to its `callback`, the\nmain `callback` (for the `each` function) is immediately called with the\nerror.\n\nNote, that since this function applies `iteratee` to each item in parallel,\nthere is no guarantee that the iteratee functions will complete in order.\n\nin `coll`. The iteratee is passed a `callback(err)` which must be called once\nit has completed. If no error has occurred, the `callback` should be run\nwithout arguments or with an explicit `null` argument. The array index is not\npassed to the iteratee. Invoked with (item, callback). If you need the index,\nuse `eachOf`.\n`iteratee` functions have finished, or an error occurs. Invoked with (err).\n\n### Example\n```javascript\n\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n  // if any of the saves produced an error, err would equal that error\n});\n\n// assuming openFiles is an array of file names\nasync.each(openFiles, function(file, callback) {\n\n    // Perform operation on file here.\n    console.log('Processing file ' + file);\n\n    if( file.length > 32 ) {\n      console.log('This file name is too long');\n      callback('File name too long');\n    } else {\n      // Do work to process file here\n      console.log('File processed');\n      callback();\n    }\n}, function(err) {\n    // if any of the file processing produced an error, err would equal that error\n    if( err ) {\n      // One of the iterations produced an error.\n      // All processing will now stop.\n      console.log('A file failed to process');\n    } else {\n      console.log('All files have been processed successfully');\n    }\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nApplies the function `iteratee` to each item in `coll`, in parallel.\nThe `iteratee` is called with an item from the list, and a callback for when\nit has finished. If the `iteratee` passes an error to its `callback`, the\nmain `callback` (for the `each` function) is immediately called with the\nerror.\n\nNote, that since this function applies `iteratee` to each item in parallel,\nthere is no guarantee that the iteratee functions will complete in order.\n\nin `coll`. The iteratee is passed a `callback(err)` which must be called once\nit has completed. If no error has occurred, the `callback` should be run\nwithout arguments or with an explicit `null` argument. The array index is not\npassed to the iteratee. Invoked with (item, callback). If you need the index,\nuse `eachOf`.\n`iteratee` functions have finished, or an error occurs. Invoked with (err).\n\n### Example\n```javascript\n\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n  // if any of the saves produced an error, err would equal that error\n});\n\n// assuming openFiles is an array of file names\nasync.each(openFiles, function(file, callback) {\n\n    // Perform operation on file here.\n    console.log('Processing file ' + file);\n\n    if( file.length > 32 ) {\n      console.log('This file name is too long');\n      callback('File name too long');\n    } else {\n      // Do work to process file here\n      console.log('File processed');\n      callback();\n    }\n}, function(err) {\n    // if any of the file processing produced an error, err would equal that error\n    if( err ) {\n      // One of the iterations produced an error.\n      // All processing will now stop.\n      console.log('A file failed to process');\n    } else {\n      console.log('All files have been processed successfully');\n    }\n});\n\n```\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","each"]],"name":"each","delimiter":"."}],"sanitaryName":"each","baseTagPath":"../../../../"}