{"elemID":"component_269","date":"6/5/2020","time":"12:00am","name":"autoInject","pathname":"autoInject","pathstr":"async.autoInject","path":[["/","async"],[".","autoInject"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_265","date":"6/5/2020","time":"12:00am","name":"tasks","pathname":"tasks","pathstr":"async.autoInject(tasks","path":[["/","async"],[".","autoInject"],["(","tasks"]],"flags":[],"source":[["/","async"],[".","autoInject"]],"sourcestr":"async.autoInject","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","autoInject"]],"name":"autoInject","delimiter":"."},{"path":[["/","async"],[".","autoInject"],["(","tasks"]],"name":"tasks","delimiter":"("}]},{"elemID":"component_266","date":"6/5/2020","time":"12:00am","name":"callback","pathname":"callback","pathstr":"async.autoInject(callback","path":[["/","async"],[".","autoInject"],["(","callback"]],"flags":[],"source":[["/","async"],[".","autoInject"]],"sourcestr":"async.autoInject","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","autoInject"]],"name":"autoInject","delimiter":"."},{"path":[["/","async"],[".","autoInject"],["(","callback"]],"name":"callback","delimiter":"("}]}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"summaryDoc":[{"doc":"\n\nA dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\ntasks are specified as parameters to the function, after the usual callback\nparameter, with the parameter names matching the names of the tasks it\ndepends on. This can provide even more readable task graphs which can be\neasier to maintain.\n\nIf a final callback is specified, the task results are similarly injected,\nspecified as named parameters after the initial error parameter.\n\nThe autoInject function is purely syntactic sugar and its semantics are\notherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n\nthe form 'func([dependencies...], callback). The object's key of a property\nserves as the name of the task defined by that property, i.e. can be used\nwhen specifying requirements for other tasks.\n* The `callback` parameter is a `callback(err, result)` which must be called\nwhen finished, passing an `error` (which can be `null`) and the result of\nthe function's execution. The remaining parameters name other tasks on\nwhich the task is dependent, and the results from those tasks are the\narguments of those parameters.\nthe tasks have been completed. It receives the `err` argument if any `tasks`\npass an error to their callback, and a `results` object with any completed\ntask results, similar to `auto`.\n\n### Example\n```javascript\n\n//  The example from `auto` can be rewritten as follows:\nasync.autoInject({\nget_data: function(callback) {\n// async code to get some data\ncallback(null, 'data', 'converted to array');\n},\nmake_folder: function(callback) {\n// async code to create a directory to store a file in\n// this is run at the same time as getting the data\ncallback(null, 'folder');\n},\nwrite_file: function(get_data, make_folder, callback) {\n// once there is some data and the directory exists,\n// write the data to a file in the directory\ncallback(null, 'filename');\n},\nemail_link: function(write_file, callback) {\n// once the file is written let's email a link to it...\n// write_file contains the filename returned by write_file.\ncallback(null, {'file':write_file, 'email':'user@example.com'});\n}\n}, function(err, results) {\nconsole.log('err = ', err);\nconsole.log('email_link = ', results.email_link);\n});\n\n// If you are using a JS minifier that mangles parameter names, `autoInject`\n// will not work with plain functions, since the parameter names will be\n// collapsed to a single letter identifier.  To work around this, you can\n// explicitly specify the names of the parameters your task function needs\n// in an array, similar to Angular.js dependency injection.\n\n// This still has an advantage over plain `auto`, since the results a task\n// depends on are still spread into arguments.\nasync.autoInject({\n//...\nwrite_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\ncallback(null, 'filename');\n}],\nemail_link: ['write_file', function(write_file, callback) {\ncallback(null, {'file':write_file, 'email':'user@example.com'});\n}]\n//...\n}, function(err, results) {\nconsole.log('err = ', err);\nconsole.log('email_link = ', results.email_link);\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nA dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\ntasks are specified as parameters to the function, after the usual callback\nparameter, with the parameter names matching the names of the tasks it\ndepends on. This can provide even more readable task graphs which can be\neasier to maintain.\n\nIf a final callback is specified, the task results are similarly injected,\nspecified as named parameters after the initial error parameter.\n\nThe autoInject function is purely syntactic sugar and its semantics are\notherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n\nthe form 'func([dependencies...], callback). The object's key of a property\nserves as the name of the task defined by that property, i.e. can be used\nwhen specifying requirements for other tasks.\n* The `callback` parameter is a `callback(err, result)` which must be called\nwhen finished, passing an `error` (which can be `null`) and the result of\nthe function's execution. The remaining parameters name other tasks on\nwhich the task is dependent, and the results from those tasks are the\narguments of those parameters.\nthe tasks have been completed. It receives the `err` argument if any `tasks`\npass an error to their callback, and a `results` object with any completed\ntask results, similar to `auto`.\n\n### Example\n```javascript\n\n//  The example from `auto` can be rewritten as follows:\nasync.autoInject({\nget_data: function(callback) {\n// async code to get some data\ncallback(null, 'data', 'converted to array');\n},\nmake_folder: function(callback) {\n// async code to create a directory to store a file in\n// this is run at the same time as getting the data\ncallback(null, 'folder');\n},\nwrite_file: function(get_data, make_folder, callback) {\n// once there is some data and the directory exists,\n// write the data to a file in the directory\ncallback(null, 'filename');\n},\nemail_link: function(write_file, callback) {\n// once the file is written let's email a link to it...\n// write_file contains the filename returned by write_file.\ncallback(null, {'file':write_file, 'email':'user@example.com'});\n}\n}, function(err, results) {\nconsole.log('err = ', err);\nconsole.log('email_link = ', results.email_link);\n});\n\n// If you are using a JS minifier that mangles parameter names, `autoInject`\n// will not work with plain functions, since the parameter names will be\n// collapsed to a single letter identifier.  To work around this, you can\n// explicitly specify the names of the parameters your task function needs\n// in an array, similar to Angular.js dependency injection.\n\n// This still has an advantage over plain `auto`, since the results a task\n// depends on are still spread into arguments.\nasync.autoInject({\n//...\nwrite_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\ncallback(null, 'filename');\n}],\nemail_link: ['write_file', function(write_file, callback) {\ncallback(null, {'file':write_file, 'email':'user@example.com'});\n}]\n//...\n}, function(err, results) {\nconsole.log('err = ', err);\nconsole.log('email_link = ', results.email_link);\n});\n\n```\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","autoInject"]],"name":"autoInject","delimiter":"."}],"baseTagPath":"../../../../"}