{"elemID":"component_1533","date":"6/5/2020","time":"12:00am","name":"parallel","pathname":"parallel","pathstr":"async/ControlFlow.parallel","path":[["/","async"],["/","ControlFlow"],[".","parallel"]],"flags":[],"source":[["/","async"],["/","ControlFlow"]],"sourcestr":"async/ControlFlow","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false},{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_1529","date":"6/5/2020","time":"12:00am","name":"tasks","pathname":"tasks","pathstr":"async/ControlFlow.parallel(0","path":[["/","async"],["/","ControlFlow"],[".","parallel"],["(","tasks"]],"flags":[],"source":[["/","async"],["/","ControlFlow"],[".","parallel"]],"sourcestr":"async/ControlFlow.parallel","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"]],"name":"ControlFlow","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"],[".","parallel"]],"name":"parallel","delimiter":"."},{"path":[["/","async"],["/","ControlFlow"],[".","parallel"],["(","tasks"]],"name":"tasks","delimiter":"("}],"sanitaryName":"tasks"},{"elemID":"component_1530","date":"6/5/2020","time":"12:00am","name":"callback","pathname":"callback","pathstr":"async/ControlFlow.parallel(1","path":[["/","async"],["/","ControlFlow"],[".","parallel"],["(","callback"]],"flags":[],"source":[["/","async"],["/","ControlFlow"],[".","parallel"]],"sourcestr":"async/ControlFlow.parallel","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"]],"name":"ControlFlow","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"],[".","parallel"]],"name":"parallel","delimiter":"."},{"path":[["/","async"],["/","ControlFlow"],[".","parallel"],["(","callback"]],"name":"callback","delimiter":"("}],"sanitaryName":"callback"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"sourceFile":"dist\\async.js","sourceLine":3749,"summaryDoc":[{"doc":"\n\nRun the `tasks` collection of functions in parallel, without waiting until\nthe previous function has completed. If any of the functions pass an error to\nits callback, the main `callback` is immediately called with the value of the\nerror. Once the `tasks` have completed, the results are passed to the final\n`callback` as an array.\n\n**Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\nparallel execution of code.  If your tasks do not use any timers or perform\nany I/O, they will actually be executed in series.  Any synchronous setup\nsections for each task will happen one after the other.  JavaScript remains\nsingle-threaded.\n\nIt is also possible to use an object instead of an array. Each property will\nbe run as a function and the results will be passed to the final `callback`\nas an object instead of an array. This can be a more readable way of handling\nresults from {@link async.parallel}.\n\n\n### Example\n```javascript\nfunctions have completed successfully. This function gets a results array\n(or object) containing all the result arguments passed to the task callbacks.\nInvoked with (err, results).\nasync.parallel([\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results) {\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback) {\n        setTimeout(function() {\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback) {\n        setTimeout(function() {\n            callback(null, 2);\n        }, 100);\n    }\n}, function(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nRun the `tasks` collection of functions in parallel, without waiting until\nthe previous function has completed. If any of the functions pass an error to\nits callback, the main `callback` is immediately called with the value of the\nerror. Once the `tasks` have completed, the results are passed to the final\n`callback` as an array.\n\n**Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\nparallel execution of code.  If your tasks do not use any timers or perform\nany I/O, they will actually be executed in series.  Any synchronous setup\nsections for each task will happen one after the other.  JavaScript remains\nsingle-threaded.\n\nIt is also possible to use an object instead of an array. Each property will\nbe run as a function and the results will be passed to the final `callback`\nas an object instead of an array. This can be a more readable way of handling\nresults from {@link async.parallel}.\n\n\n### Example\n```javascript\nfunctions have completed successfully. This function gets a results array\n(or object) containing all the result arguments passed to the task callbacks.\nInvoked with (err, results).\nasync.parallel([\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback) {\n        setTimeout(function() {\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results) {\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback) {\n        setTimeout(function() {\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback) {\n        setTimeout(function() {\n            callback(null, 2);\n        }, 100);\n    }\n}, function(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n\n```\n\n","context":[]}],"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"]],"name":"ControlFlow","delimiter":"/"},{"path":[["/","async"],["/","ControlFlow"],[".","parallel"]],"name":"parallel","delimiter":"."}],"aliasTo":{"path":[["/","async"],["/","ControlFlow"],[".","parallel"]],"pathstr":"async/ControlFlow.parallel"},"sanitaryName":"parallel","baseTagPath":"../../../../../../"}
