{"elemID":"component_447","date":"6/5/2020","time":"12:00am","name":"log","pathname":"log","pathstr":"async.log","path":[["/","async"],[".","log"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false},{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"sourceFile":"dist\\async.js","sourceLine":5153,"summaryDoc":[{"doc":"\n\nLogs the result of an `async` function to the `console` using `console.dir`\nto display the properties of the resulting object. Only works in Node.js or\nin browsers that support `console.dir` and `console.error` (such as FF and\nChrome). If multiple arguments are returned from the async function,\n`console.dir` is called on each argument in order.\n\narguments to.\n\n### Example\n```javascript\n\n// in a module\nvar hello = function(name, callback) {\n    setTimeout(function() {\n        callback(null, {hello: name});\n    }, 1000);\n};\n\n// in the node repl\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n\n```\n\n","context":[]},{"doc":"\n\nLogs the result of an `async` function to the `console`. Only works in\nNode.js or in browsers that support `console.log` and `console.error` (such\nas FF and Chrome). If multiple arguments are returned from the async\nfunction, `console.log` is called on each argument in order.\n\narguments to.\n\n### Example\n```javascript\n\n// in a module\nvar hello = function(name, callback) {\n    setTimeout(function() {\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n\n// in the node repl\nnode> async.log(hello, 'world');\n'hello world'\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nLogs the result of an `async` function to the `console` using `console.dir`\nto display the properties of the resulting object. Only works in Node.js or\nin browsers that support `console.dir` and `console.error` (such as FF and\nChrome). If multiple arguments are returned from the async function,\n`console.dir` is called on each argument in order.\n\narguments to.\n\n### Example\n```javascript\n\n// in a module\nvar hello = function(name, callback) {\n    setTimeout(function() {\n        callback(null, {hello: name});\n    }, 1000);\n};\n\n// in the node repl\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n\n```\n\n","context":[]},{"doc":"\n\nLogs the result of an `async` function to the `console`. Only works in\nNode.js or in browsers that support `console.log` and `console.error` (such\nas FF and Chrome). If multiple arguments are returned from the async\nfunction, `console.log` is called on each argument in order.\n\narguments to.\n\n### Example\n```javascript\n\n// in a module\nvar hello = function(name, callback) {\n    setTimeout(function() {\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n\n// in the node repl\nnode> async.log(hello, 'world');\n'hello world'\n\n```\n\n","context":[]}],"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","log"]],"name":"log","delimiter":"."}],"sanitaryName":"log","baseTagPath":"../../../../"}
