{"elemID":"component_805","date":"6/5/2020","time":"12:00am","name":"waterfall","pathname":"waterfall","pathstr":"async.waterfall","path":[["/","async"],[".","waterfall"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_798","date":"6/5/2020","time":"12:00am","name":"tasks","pathname":"tasks","pathstr":"async.waterfall(tasks","path":[["/","async"],[".","waterfall"],["(","tasks"]],"flags":[],"source":[["/","async"],[".","waterfall"]],"sourcestr":"async.waterfall","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","waterfall"]],"name":"waterfall","delimiter":"."},{"path":[["/","async"],[".","waterfall"],["(","tasks"]],"name":"tasks","delimiter":"("}],"sanitaryName":"tasks"},{"elemID":"component_802","date":"6/5/2020","time":"12:00am","name":"callback","pathname":"callback","pathstr":"async.waterfall(callback","path":[["/","async"],[".","waterfall"],["(","callback"]],"flags":[],"source":[["/","async"],[".","waterfall"]],"sourcestr":"async.waterfall","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[{"elemID":"component_801","date":"6/5/2020","time":"12:00am","name":"apply","pathname":"apply","pathstr":"async.waterfall(callback.apply","path":[["/","async"],[".","waterfall"],["(","callback"],[".","apply"]],"flags":[],"source":[["/","async"],[".","waterfall"],["(","callback"]],"sourcestr":"async.waterfall(callback","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_799","date":"6/5/2020","time":"12:00am","pathname":"unnamed_187","pathstr":"async.waterfall(callback.apply(unnamed_187","path":[["/","async"],[".","waterfall"],["(","callback"],[".","apply"],["(","unnamed_187"]],"flags":[],"source":[["/","async"],[".","waterfall"],["(","callback"],[".","apply"]],"sourcestr":"async.waterfall(callback.apply","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[{"path":[[null,"null"]],"isPointer":false,"isArray":false,"generics":[],"name":"null"}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","waterfall"]],"name":"waterfall","delimiter":"."},{"path":[["/","async"],[".","waterfall"],["(","callback"]],"name":"callback","delimiter":"("},{"path":[["/","async"],[".","waterfall"],["(","callback"],[".","apply"]],"name":"apply","delimiter":"."},{"path":[["/","async"],[".","waterfall"],["(","callback"],[".","apply"],["(","unnamed_187"]],"name":"unnamed_187","delimiter":"("}],"sanitaryName":"unnamed_187"},{"elemID":"component_800","date":"6/5/2020","time":"12:00am","pathname":"unnamed_188","pathstr":"async.waterfall(callback.apply(unnamed_188","path":[["/","async"],[".","waterfall"],["(","callback"],[".","apply"],["(","unnamed_188"]],"flags":[],"source":[["/","async"],[".","waterfall"],["(","callback"],[".","apply"]],"sourcestr":"async.waterfall(callback.apply","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","waterfall"]],"name":"waterfall","delimiter":"."},{"path":[["/","async"],[".","waterfall"],["(","callback"]],"name":"callback","delimiter":"("},{"path":[["/","async"],[".","waterfall"],["(","callback"],[".","apply"]],"name":"apply","delimiter":"."},{"path":[["/","async"],[".","waterfall"],["(","callback"],[".","apply"],["(","unnamed_188"]],"name":"unnamed_188","delimiter":"("}],"sanitaryName":"unnamed_188"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"sourceFile":"async.js","sourceLine":5008,"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","waterfall"]],"name":"waterfall","delimiter":"."},{"path":[["/","async"],[".","waterfall"],["(","callback"]],"name":"callback","delimiter":"("},{"path":[["/","async"],[".","waterfall"],["(","callback"],[".","apply"]],"name":"apply","delimiter":"."}],"sanitaryName":"apply"}],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isFunction":false,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","waterfall"]],"name":"waterfall","delimiter":"."},{"path":[["/","async"],[".","waterfall"],["(","callback"]],"name":"callback","delimiter":"("}],"sanitaryName":"callback"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"sourceFile":"async.js","sourceLine":5000,"summaryDoc":[{"doc":"\n\nRuns the `tasks` array of functions in series, each passing their results to\nthe next in the array. However, if any of the `tasks` pass an error to their\nown callback, the next function is not executed, and the main `callback` is\nimmediately called with the error.\n\na `callback(err, result1, result2, ...)` it must call on completion. The\nfirst argument is an error (which can be `null`) and any further arguments\nwill be passed as arguments in order to the next task.\nfunctions have completed. This will be passed the results of the last task's\ncallback. Invoked with (err, [results]).\n\n### Example\n```javascript\n\nasync.waterfall([\n    function(callback) {\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback) {\n        // arg1 now equals 'one' and arg2 now equals 'two'\n        callback(null, 'three');\n    },\n    function(arg1, callback) {\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n    // result now equals 'done'\n});\n\n// Or, with named functions:\nasync.waterfall([\n    myFirstFunction,\n    mySecondFunction,\n    myLastFunction,\n], function (err, result) {\n    // result now equals 'done'\n});\nfunction myFirstFunction(callback) {\n    callback(null, 'one', 'two');\n}\nfunction mySecondFunction(arg1, arg2, callback) {\n    // arg1 now equals 'one' and arg2 now equals 'two'\n    callback(null, 'three');\n}\nfunction myLastFunction(arg1, callback) {\n    // arg1 now equals 'three'\n    callback(null, 'done');\n}\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nRuns the `tasks` array of functions in series, each passing their results to\nthe next in the array. However, if any of the `tasks` pass an error to their\nown callback, the next function is not executed, and the main `callback` is\nimmediately called with the error.\n\na `callback(err, result1, result2, ...)` it must call on completion. The\nfirst argument is an error (which can be `null`) and any further arguments\nwill be passed as arguments in order to the next task.\nfunctions have completed. This will be passed the results of the last task's\ncallback. Invoked with (err, [results]).\n\n### Example\n```javascript\n\nasync.waterfall([\n    function(callback) {\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback) {\n        // arg1 now equals 'one' and arg2 now equals 'two'\n        callback(null, 'three');\n    },\n    function(arg1, callback) {\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n    // result now equals 'done'\n});\n\n// Or, with named functions:\nasync.waterfall([\n    myFirstFunction,\n    mySecondFunction,\n    myLastFunction,\n], function (err, result) {\n    // result now equals 'done'\n});\nfunction myFirstFunction(callback) {\n    callback(null, 'one', 'two');\n}\nfunction mySecondFunction(arg1, arg2, callback) {\n    // arg1 now equals 'one' and arg2 now equals 'two'\n    callback(null, 'three');\n}\nfunction myLastFunction(arg1, callback) {\n    // arg1 now equals 'three'\n    callback(null, 'done');\n}\n\n```\n\n","context":[]}],"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","waterfall"]],"name":"waterfall","delimiter":"."}],"sanitaryName":"waterfall","baseTagPath":"../../../../"}