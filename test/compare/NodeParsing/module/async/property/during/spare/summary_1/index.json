{"elemID":"component_344","date":"6/5/2020","time":"12:00am","name":"summary","pathname":"summary","pathstr":"async.during~summary","path":[["/","async"],[".","during"],["~","summary"]],"flags":[],"source":[["/","async"],[".","during"]],"sourcestr":"async.during","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"spare","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":true,"isModule":false,"isClass":false,"simpleCtype":"spare","hideCtype":false,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"doc":[{"doc":"\n\nLike [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\nis passed a callback in the form of `function (err, truth)`. If error is\npassed to `test` or `fn`, the main callback is immediately called with the\nvalue of the error.\n\nexecution of `fn`. Invoked with (callback).\nThe function is passed a `callback(err)`, which must be called once it has\ncompleted with an optional `err` argument. Invoked with (callback).\nfunction has failed and repeated execution of `fn` has stopped. `callback`\nwill be passed an error, if one occured, otherwise `null`.\n\n### Example\n```javascript\n\nvar count = 0;\n\nasync.during(\n    function (callback) {\n        return callback(null, count < 5);\n    },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n\n```\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","during"]],"name":"during","delimiter":"."},{"path":[["/","async"],[".","during"],["~","summary"]],"name":"summary","delimiter":"~"}],"sanitaryName":"summary_1","baseTagPath":"../../../../../../"}
