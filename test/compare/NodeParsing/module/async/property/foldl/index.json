{"elemID":"component_859","date":"6/5/2020","time":"12:00am","name":"foldl","pathname":"foldl","pathstr":"async.foldl","path":[["/","async"],[".","foldl"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function","explicit":false}],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_853","date":"6/5/2020","time":"12:00am","pathname":"","pathstr":"async.foldl(0","path":[["/","async"],[".","reduce"],["(","coll"]],"flags":[],"source":[["/","async"],[".","foldl"]],"sourcestr":"async.foldl","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","foldl"]],"name":"foldl","delimiter":"."},{"path":[["/","async"],[".","foldl"],["(",0]],"name":"","delimiter":"("}],"aliasTo":{"path":[["/","async"],[".","reduce"],["(","coll"]],"pathstr":"async.reduce(0"},"summaryDoc":[{"doc":"\n..., callback","context":[]}],"details":[{"doc":"\n..., callback","context":[]}],"sanitaryName":"0"},{"elemID":"component_854","date":"6/5/2020","time":"12:00am","pathname":"","pathstr":"async.foldl(1","path":[["/","async"],[".","reduce"],["(","memo"]],"flags":[],"source":[["/","async"],[".","foldl"]],"sourcestr":"async.foldl","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","foldl"]],"name":"foldl","delimiter":"."},{"path":[["/","async"],[".","foldl"],["(",1]],"name":"","delimiter":"("}],"aliasTo":{"path":[["/","async"],[".","reduce"],["(","memo"]],"pathstr":"async.reduce(1"},"sanitaryName":"1"},{"elemID":"component_855","date":"6/5/2020","time":"12:00am","pathname":"","pathstr":"async.foldl(2","path":[["/","async"],[".","reduce"],["(","iteratee"]],"flags":[],"source":[["/","async"],[".","foldl"]],"sourcestr":"async.foldl","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","foldl"]],"name":"foldl","delimiter":"."},{"path":[["/","async"],[".","foldl"],["(",2]],"name":"","delimiter":"("}],"aliasTo":{"path":[["/","async"],[".","reduce"],["(","iteratee"]],"pathstr":"async.reduce(2"},"sanitaryName":"2"},{"elemID":"component_856","date":"6/5/2020","time":"12:00am","pathname":"","pathstr":"async.foldl(3","path":[["/","async"],[".","reduce"],["(","callback"]],"flags":[],"source":[["/","async"],[".","foldl"]],"sourcestr":"async.foldl","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"isTotallyEmpty":true,"hasConstructorInfo":false,"isFunction":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","foldl"]],"name":"foldl","delimiter":"."},{"path":[["/","async"],[".","foldl"],["(",3]],"name":"","delimiter":"("}],"aliasTo":{"path":[["/","async"],[".","reduce"],["(","callback"]],"pathstr":"async.reduce(3"},"sanitaryName":"3"}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"sourceFile":"dist\\async.js","sourceLine":5208,"summaryDoc":[{"doc":"\n\nReduces `coll` into a single value using an async `iteratee` to return each\nsuccessive step. `memo` is the initial state of the reduction. This function\nonly operates in series.\n\nFor performance reasons, it may make sense to split a call to this function\ninto a parallel map, and then use the normal `Array.prototype.reduce` on the\nresults. This function is for situations where each step in the reduction\nneeds to be async; if you can get the data before reducing it, then it's\nprobably a good idea to do so.\n\narray to produce the next step in the reduction. The `iteratee` is passed a\n`callback(err, reduction)` which accepts an optional error as its first\nargument, and the state of the reduction as the second. If an error is\npassed to the callback, the reduction is stopped and the main `callback` is\nimmediately called with the error. Invoked with (memo, item, callback).\n`iteratee` functions have finished. Result is the reduced value. Invoked with\n(err, result).\n\n### Example\n```javascript\n\nasync.reduce([1,2,3], 0, function(memo, item, callback) {\n    // pointless async:\n    process.nextTick(function() {\n        callback(null, memo + item)\n    });\n}, function(err, result) {\n    // result is now equal to the last value of memo, which is 6\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nReduces `coll` into a single value using an async `iteratee` to return each\nsuccessive step. `memo` is the initial state of the reduction. This function\nonly operates in series.\n\nFor performance reasons, it may make sense to split a call to this function\ninto a parallel map, and then use the normal `Array.prototype.reduce` on the\nresults. This function is for situations where each step in the reduction\nneeds to be async; if you can get the data before reducing it, then it's\nprobably a good idea to do so.\n\narray to produce the next step in the reduction. The `iteratee` is passed a\n`callback(err, reduction)` which accepts an optional error as its first\nargument, and the state of the reduction as the second. If an error is\npassed to the callback, the reduction is stopped and the main `callback` is\nimmediately called with the error. Invoked with (memo, item, callback).\n`iteratee` functions have finished. Result is the reduced value. Invoked with\n(err, result).\n\n### Example\n```javascript\n\nasync.reduce([1,2,3], 0, function(memo, item, callback) {\n    // pointless async:\n    process.nextTick(function() {\n        callback(null, memo + item)\n    });\n}, function(err, result) {\n    // result is now equal to the last value of memo, which is 6\n});\n\n```\n\n","context":[]}],"isFunction":true,"hasConstructorInfo":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","foldl"]],"name":"foldl","delimiter":"."}],"sanitaryName":"foldl","baseTagPath":"../../../../"}
