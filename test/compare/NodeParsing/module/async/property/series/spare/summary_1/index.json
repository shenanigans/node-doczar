{"elemID":"component_661","date":"6/5/2020","time":"12:00am","name":"summary","pathname":"summary","pathstr":"async.series~summary","path":[["/","async"],[".","series"],["~","summary"]],"flags":[],"source":[["/","async"],[".","series"]],"sourcestr":"async.series","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"spare","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":true,"isModule":false,"isClass":false,"simpleCtype":"spare","hideCtype":false,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"doc":[{"doc":"\n\nRun the functions in the `tasks` collection in series, each one running once\nthe previous function has completed. If any functions in the series pass an\nerror to its callback, no more functions are run, and `callback` is\nimmediately called with the value of the error. Otherwise, `callback`\nreceives an array of results when `tasks` have completed.\n\nIt is also possible to use an object instead of an array. Each property will\nbe run as a function, and the results will be passed to the final `callback`\nas an object instead of an array. This can be a more readable way of handling\n results from {@link async.series}.\n\n**Note** that while many implementations preserve the order of object\nproperties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\nexplicitly states that\n\n> The mechanics and order of enumerating the properties is not specified.\n\nSo if you rely on the order in which your series of functions are executed,\nand want this to work on all platforms, consider using an array.\n\nfunction is passed a `callback(err, result)` it must call on completion with\nan error `err` (which can be `null`) and an optional `result` value.\nfunctions have completed. This function gets a results array (or object)\ncontaining all the result arguments passed to the `task` callbacks. Invoked\nwith (err, result).\n\n### Example\n```javascript\nasync.series([\n    function(callback) {\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback) {\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results) {\n    // results is now equal to ['one', 'two']\n});\n\nasync.series({\n    one: function(callback) {\n        setTimeout(function() {\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function() {\n            callback(null, 2);\n        }, 100);\n    }\n}, function(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n\n```\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","series"]],"name":"series","delimiter":"."},{"path":[["/","async"],[".","series"],["~","summary"]],"name":"summary","delimiter":"~"}],"sanitaryName":"summary_1","baseTagPath":"../../../../../../"}
