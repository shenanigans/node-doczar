{"elemID":"component_464","date":"6/5/2020","time":"12:00am","name":"reflectAll","pathname":"reflectAll","pathstr":"async.reflectAll","path":[["/","async"],[".","reflectAll"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_461","date":"6/5/2020","time":"12:00am","name":"tasks","pathname":"tasks","pathstr":"async.reflectAll(tasks","path":[["/","async"],[".","reflectAll"],["(","tasks"]],"flags":[],"source":[["/","async"],[".","reflectAll"]],"sourcestr":"async.reflectAll","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","reflectAll"]],"name":"reflectAll","delimiter":"."},{"path":[["/","async"],[".","reflectAll"],["(","tasks"]],"name":"tasks","delimiter":"("}]}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"summaryDoc":[{"doc":"\n\nA helper function that wraps an array or an object of functions with reflect.\n\n`async.reflect`\n\n### Example\n```javascript\n\nlet tasks = [\nfunction(callback) {\nsetTimeout(function() {\ncallback(null, 'one');\n}, 200);\n},\nfunction(callback) {\n// do some more stuff but error ...\ncallback(new Error('bad stuff happened'));\n},\nfunction(callback) {\nsetTimeout(function() {\ncallback(null, 'two');\n}, 100);\n}\n];\n\nasync.parallel(async.reflectAll(tasks),\n// optional callback\nfunction(err, results) {\n// values\n// results[0].value = 'one'\n// results[1].error = Error('bad stuff happened')\n// results[2].value = 'two'\n});\n\n// an example using an object instead of an array\nlet tasks = {\none: function(callback) {\nsetTimeout(function() {\ncallback(null, 'one');\n}, 200);\n},\ntwo: function(callback) {\ncallback('two');\n},\nthree: function(callback) {\nsetTimeout(function() {\ncallback(null, 'three');\n}, 100);\n}\n};\n\nasync.parallel(async.reflectAll(tasks),\n// optional callback\nfunction(err, results) {\n// values\n// results.one.value = 'one'\n// results.two.error = 'two'\n// results.three.value = 'three'\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nA helper function that wraps an array or an object of functions with reflect.\n\n`async.reflect`\n\n### Example\n```javascript\n\nlet tasks = [\nfunction(callback) {\nsetTimeout(function() {\ncallback(null, 'one');\n}, 200);\n},\nfunction(callback) {\n// do some more stuff but error ...\ncallback(new Error('bad stuff happened'));\n},\nfunction(callback) {\nsetTimeout(function() {\ncallback(null, 'two');\n}, 100);\n}\n];\n\nasync.parallel(async.reflectAll(tasks),\n// optional callback\nfunction(err, results) {\n// values\n// results[0].value = 'one'\n// results[1].error = Error('bad stuff happened')\n// results[2].value = 'two'\n});\n\n// an example using an object instead of an array\nlet tasks = {\none: function(callback) {\nsetTimeout(function() {\ncallback(null, 'one');\n}, 200);\n},\ntwo: function(callback) {\ncallback('two');\n},\nthree: function(callback) {\nsetTimeout(function() {\ncallback(null, 'three');\n}, 100);\n}\n};\n\nasync.parallel(async.reflectAll(tasks),\n// optional callback\nfunction(err, results) {\n// values\n// results.one.value = 'one'\n// results.two.error = 'two'\n// results.three.value = 'three'\n});\n\n```\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","reflectAll"]],"name":"reflectAll","delimiter":"."}],"baseTagPath":"../../../../"}