{"elemID":"component_528","date":"6/5/2020","time":"12:00am","name":"summary","pathname":"summary","pathstr":"async.priorityQueue~summary","path":[["/","async"],[".","priorityQueue"],["~","summary"]],"flags":[],"source":[["/","async"],[".","priorityQueue"]],"sourcestr":"async.priorityQueue","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"spare","valtype":[],"isKwarg":false,"isMultiArg":false,"isSpare":true,"isModule":false,"isClass":false,"simpleCtype":"spare","hideCtype":false,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"isTotallyEmpty":false,"doc":[{"doc":"\n\nThe same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\ncompleted in ascending priority order.\n\ntask, which must call its `callback(err)` argument when finished, with an\noptional `error` as an argument.  If you want to handle errors from an\nindividual task, pass a callback to `q.push()`. Invoked with\n(task, callback).\nfunctions should be run in parallel.  If omitted, the concurrency defaults to\n`1`.  If the concurrency is `0`, an error is thrown.\ndifferences between `queue` and `priorityQueue` objects:\n* `push(task, priority, [callback])` - `priority` should be a number. If an\n  array of `tasks` is given, all tasks will be assigned the same priority.\n* The `unshift` method was removed.\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","priorityQueue"]],"name":"priorityQueue","delimiter":"."},{"path":[["/","async"],[".","priorityQueue"],["~","summary"]],"name":"summary","delimiter":"~"}],"sanitaryName":"summary_1","baseTagPath":"../../../../../../"}
