{"elemID":"component_411","date":"6/5/2020","time":"12:00am","name":"parallel","pathname":"parallel","pathstr":"async.parallel","path":[["/","async"],[".","parallel"]],"flags":[],"source":[["/","async"]],"sourcestr":"async","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"property","valtype":[{"path":[[null,"Function"]],"isPointer":false,"isArray":false,"generics":[],"name":"Function"}],"isKwarg":false,"isMultiArg":false,"isFunction":true,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"property","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[{"elemID":"component_407","date":"6/5/2020","time":"12:00am","name":"tasks","pathname":"tasks","pathstr":"async.parallel(tasks","path":[["/","async"],[".","parallel"],["(","tasks"]],"flags":[],"source":[["/","async"],[".","parallel"]],"sourcestr":"async.parallel","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","parallel"]],"name":"parallel","delimiter":"."},{"path":[["/","async"],[".","parallel"],["(","tasks"]],"name":"tasks","delimiter":"("}]},{"elemID":"component_408","date":"6/5/2020","time":"12:00am","name":"callback","pathname":"callback","pathstr":"async.parallel(callback","path":[["/","async"],[".","parallel"],["(","callback"]],"flags":[],"source":[["/","async"],[".","parallel"]],"sourcestr":"async.parallel","superClasses":[],"interfaces":[],"satisfies":[],"ctype":"argument","valtype":[],"isKwarg":false,"isMultiArg":false,"isFunction":false,"isSpare":false,"isModule":false,"isClass":false,"simpleCtype":"argument","hideCtype":true,"spares":[],"modules":[],"enums":[],"statics":[],"functions":[],"members":[],"methods":[],"localValues":[],"localFunctions":[],"arguments":[],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":false,"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","parallel"]],"name":"parallel","delimiter":"."},{"path":[["/","async"],[".","parallel"],["(","callback"]],"name":"callback","delimiter":"("}]}],"finalArgs":[],"finalKwargs":[],"returns":[],"throws":[],"names":[],"events":[],"signatures":[],"propertySymbols":[],"memberSymbols":[],"returnsSymbols":[],"hasChildren":true,"summaryDoc":[{"doc":"\n\nRun the `tasks` collection of functions in parallel, without waiting until\nthe previous function has completed. If any of the functions pass an error to\nits callback, the main `callback` is immediately called with the value of the\nerror. Once the `tasks` have completed, the results are passed to the final\n`callback` as an array.\n\n**Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\nparallel execution of code.  If your tasks do not use any timers or perform\nany I/O, they will actually be executed in series.  Any synchronous setup\nsections for each task will happen one after the other.  JavaScript remains\nsingle-threaded.\n\nIt is also possible to use an object instead of an array. Each property will\nbe run as a function and the results will be passed to the final `callback`\nas an object instead of an array. This can be a more readable way of handling\nresults from {@link async.parallel}.\n\nEach function is passed a `callback(err, result)` which it must call on\ncompletion with an error `err` (which can be `null`) and an optional `result`\nvalue.\nfunctions have completed successfully. This function gets a results array\n(or object) containing all the result arguments passed to the task callbacks.\nInvoked with (err, results).\n\n### Example\n```javascript\nasync.parallel([\nfunction(callback) {\nsetTimeout(function() {\ncallback(null, 'one');\n}, 200);\n},\nfunction(callback) {\nsetTimeout(function() {\ncallback(null, 'two');\n}, 100);\n}\n],\n// optional callback\nfunction(err, results) {\n// the results array will equal ['one','two'] even though\n// the second function had a shorter timeout.\n});\n\n// an example using an object instead of an array\nasync.parallel({\none: function(callback) {\nsetTimeout(function() {\ncallback(null, 1);\n}, 200);\n},\ntwo: function(callback) {\nsetTimeout(function() {\ncallback(null, 2);\n}, 100);\n}\n}, function(err, results) {\n// results is now equals to: {one: 1, two: 2}\n});\n\n```\n\n","context":[]}],"details":[{"doc":"\n\nRun the `tasks` collection of functions in parallel, without waiting until\nthe previous function has completed. If any of the functions pass an error to\nits callback, the main `callback` is immediately called with the value of the\nerror. Once the `tasks` have completed, the results are passed to the final\n`callback` as an array.\n\n**Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\nparallel execution of code.  If your tasks do not use any timers or perform\nany I/O, they will actually be executed in series.  Any synchronous setup\nsections for each task will happen one after the other.  JavaScript remains\nsingle-threaded.\n\nIt is also possible to use an object instead of an array. Each property will\nbe run as a function and the results will be passed to the final `callback`\nas an object instead of an array. This can be a more readable way of handling\nresults from {@link async.parallel}.\n\nEach function is passed a `callback(err, result)` which it must call on\ncompletion with an error `err` (which can be `null`) and an optional `result`\nvalue.\nfunctions have completed successfully. This function gets a results array\n(or object) containing all the result arguments passed to the task callbacks.\nInvoked with (err, results).\n\n### Example\n```javascript\nasync.parallel([\nfunction(callback) {\nsetTimeout(function() {\ncallback(null, 'one');\n}, 200);\n},\nfunction(callback) {\nsetTimeout(function() {\ncallback(null, 'two');\n}, 100);\n}\n],\n// optional callback\nfunction(err, results) {\n// the results array will equal ['one','two'] even though\n// the second function had a shorter timeout.\n});\n\n// an example using an object instead of an array\nasync.parallel({\none: function(callback) {\nsetTimeout(function() {\ncallback(null, 1);\n}, 200);\n},\ntwo: function(callback) {\nsetTimeout(function() {\ncallback(null, 2);\n}, 100);\n}\n}, function(err, results) {\n// results is now equals to: {one: 1, two: 2}\n});\n\n```\n\n","context":[]}],"breadcrumbs":[{"path":[["/","async"]],"name":"async","delimiter":"/"},{"path":[["/","async"],[".","parallel"]],"name":"parallel","delimiter":"."}],"baseTagPath":"../../../../"}